clear_variables();
epos_init();
epos_set_speed(2);

//
// Input parameters:
//

f = 5.0; // GHz, target frequency
D = 0.235; // Size of object
rho0 = 0.58; // m, measurement distance of NF
NA=10; // Number of repeating measurements on each angle with the phase stabilization
threshold = 100; // Used in the reference signal preprocessing, set 0 to ignore the reference.
avg = 256;
avgType = 2;


set_averaging(avgType,avg);

// minFreq and maxFreq are used at the acquisition stage,
// so should include all valid frequencies for a given hardware.
// Also, the same range should be used as in calibration_function_calculation.mac
maxFreq = 18;
minFreq = 2;

calibrationPath = "C:/matlab_workplace/cylindrical_nf_ff/calibration.sig";

path = "C:/matlab_workplace/cylindrical_nf_ff/nf_ff_measurement.sig";
pathBackground = "C:/matlab_workplace/cylindrical_nf_ff/nf_ff_background.sig";
measurement = true;
backgroundMeasurement = true;

N = count(ch1);
T = window(ch1);

totalAngles = 360;
c = 0.3; // m/ns, speed of light
k = 2 * pi() * f / c; // wave number
kind = 2; // "kind" of Hankel function to use
index_in_z = floor(f * T + 1);
out(index_in_z);

// Sphere RCS caalculation for the input frequency
eps = 0.000001;
srcs = 0 + 0*j();
f1 =1*j();
f2 = 1+0*j() ;
m = 1;
nn = 0;
q = -1;
del = 10000+10000*j();
del2=cabs(del);
kr = k * r / 100;
while (del2>eps)
{
	  q = -q;
	  nn = nn + 1;
	  m = m + 2;
	  del = (2*nn-1) * f2 / kr-f1;
	  f1 = f2;
	  f2 = del;
	  del=divi(q * m, f2 * (kr * f1 - nn * f2));
	  srcs = srcs + del;
	  del2=cabs(del);
}

teorSphereRcs=mag(srcs*srcs*pi()*r*r); // cm^2

out(teorSphereRcs);

acquire(1,b,2,base);
summ=base;
summ=0;
is_done  = 0;
if (measurement)
{
	  print("Will remeasure the object under test with/without its background.");
	  if (backgroundMeasurement)
	  {
		  sig_add(pathBackground, base);
		  sig_delete_all(pathBackground);
		  print("Object under test background measurement started.");
		  for (k = 0; k < totalAngles; k = k + 1)
		  {
			  epos_move_to_angle_deg(k);
			  while(is_done == 0)
			  {
			      epos_get_status_and_position(k,is_done);
			  }
			  is_done = 0;
			  
			  for(i=0;i<NA;i=i+1)
			  {
				    acquire(1,b,2,current);
				    current2 = lf(current,6,8,-8);
							    
				    pos = 0;
				    maxVal = max(current2,pos);
				    for (ia = 0; ia < N; ia = ia + 1)
				    {
						  if(current2[ia] < maxVal - threshold)
						  {
							    current2[ia] = 0;
						  }
						  else
						  {
							    current2[ia] = current2[ia] - (maxVal - threshold);
						  }
				    }
							    
				    (dt)=difference2(base2,current2);
				    dt = -dt;
				    (s2)=push2(b,dt);
				    (s3)=push2(current2,dt);
				    summ=summ+s2;
				    
				    sig_add(path, s2);
				    sig_add(path, s3);
				    
			  }
			  r13 = summ;
			  b=lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6);
			  sig_add(pathBackground, b);
		  }

		  print("Object under test background measurement finished.");
		  pause();
	  }
	  
	  w3Obj=b;
	  freqN=count(w3Obj);
	  n0 = 0*freqN;
	  n1 = 0.1*freqN;
	  n2 = 0.4*freqN;
	  n3 = 0.5*freqN;

	  w3Obj=1;
	  out(N);

	  for(i=0;i<n0;i=i+1)
	  {
		  w3Obj[i]=0;
	  }
	  for(i=n0;i<n1;i=i+1)
	  {
		  w3Obj[i]=sqr(sqr(sin((i - n0)/(n1 - n0)*pi()/2)));
	  }
	  upper = n3 - n2;
		  
	  for(i=0;i< upper;i=i+1)
	  {
		   index = n2 + i;
		   w3Obj[index]=sqr(sqr(sin(pi()*(upper - i)/upper/2)));
	  }

	  for(i=n3;i<freqN;i=i+1)
	  {
		  w3Obj[i]=0;
	  }
	  
	  sig_add(path, base);
	  sig_delete_all(path);
	  print("Object under test measurement started.");
	  for (k = 0; k < totalAngles; k = k + 1)
	  {
		    epos_move_to_angle_deg(k);
		    while(is_done == 0)
		    {
			      epos_get_status_and_position(k,is_done);
		    }
		    is_done = 0;
			  
		    summ=base;
		    summ=0;
		    out(k);

		    for(i=0;i<NA;i=i+1)
		    {
			      acquire(1,sig,2,current);
			      current2 = lf(current,6,8,-8);
			      
			      pos = 0;
			      maxVal = max(current2,pos);
			      for (ia = 0; ia < N; ia = ia + 1)
			      {
					if(current2[ia] < maxVal - threshold)
					{
						  current2[ia] = 0;
					}
					else
					{
						  current2[ia] = current2[ia] - (maxVal - threshold);
					}
			      }
			      
			      (dt)=difference2(base2,current2);
			      dt = -dt;
			      (s2)=push2(sig,dt);
			      //out(dt);
			      summ=summ+s2;
		    }

		    rawObjectSignal=lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6) ;
		    
		    sig_add(path, rawObjectSignal);
	  }
	  sig_add(path, w3Obj);
	  print("Object under test measurement finished.");
	  
	  sphere_td = sig_read(calibrationPath, 1);
	  sphere_fd = fft(sphere_td);
	  
	  for (ia = 0; ia < totalAngles; ia = ia + 1)
	  {
		    near_td = w3Obj * (sig_read(path, ia) - sig_read(pathBackground, ia)) ;
		    pattern_near[ia] = near_td[index_in_z];      
		    pattern_sphere[ia] = sphere_fd[index_in_z];
	  }
}
else
{
	  w3Obj = sig_read(path, totalAngles);
	  for (ia = 0; ia < totalAngles; ia = ia + 1)
	  {
		    near_td = w3Obj * (sig_read(path, ia) - sig_read(pathBackground, ia));
		    pattern_near[ia] = near_td[index_in_z];      
		    pattern_sphere[ia] = sphere_fd[index_in_z];
	  }
}

max_order = floor(2 * k * D);
out(max_order);
argument = 2 * k * rho0; // This is the argument for Hankel function in (11)

// Precompute Hankel function results
hankel_array = signal(1, max_order*2 + 1, true);
j_powers = signal(1, max_order*2 + 1, true);


// Variables for Hankel function calculation
scaling = 1; //1 - no scaling, 2 - do scale
//this complex variable stores result
//must be prepared before call
hankel_result = 1 + j() * 1;

for (order = -max_order; order <= max_order; order = order + 1)
{
	  ierr = cbesh(argument,order,scaling,kind,hankel_result);
	  hankel_array[max_order + order] = hankel_result;
	  
	  // It should be just C++ modulo operator and switch statement as we calculate
	  // integer powers of j. 0th power gives 1, 1st power gives j, 2nd power gives -1,
	  // 3rd power gives -j, 4rth power gives 1 again.
	  reminder = order / 4 - floor(order / 4);
	  
	  if (reminder < 0.1) // Just 0
	  {
		    j_powers[max_order + order] = 1;
	  }
	  else
	  {
		    if (reminder < 0.35) // It is 0.25
		    {
			      j_powers[max_order + order] = 0 + j;
		    }
		    else
		    {
			      if (reminder < 0.6) // It is 0.5
			      {
					j_powers[max_order + order] = -1;
			      }
			      else
			      {
					// It is 0.75
					j_powers[max_order + order] = 0 - j;
			      }
		    }
	  }
}


phis = signal(1, totalAngles, false);
for (ia = 0; ia < totalAngles; ia = ia + 1)
{
	  phis[ia] = ia * pi() / 180;
}


Vphi = signal(1, totalAngles, true); 
Vphi = 0;

for (phi_index = 0; phi_index < totalAngles; phi_index = phi_index + 1)
{
        phi = phis[phi_index];
        for (order = -max_order; order <= max_order; order = order + 1)
        {
		  order_index = order + max_order;
		  exp_argument = order * phi;
		  Vphi[phi_index] = Vphi[phi_index] + j_powers[order_index] * (cos(exp_argument) + j*sin(exp_argument)) / hankel_array[order_index];
        }
}

NF_FF_data = signal(1, 360, true);
sphere_renormalized = signal(1, 360, true);

// Instead of the function below ifft(fft(Vphi)*conj(fft(pattern_near))) should produce same result.
// In macroprocessor we can't perform FFT on a complex signal and the result is not symmetric
// like it is assumed, so we can't drop negative frequencies after the FFT. Also, we should not do
// the zero-padding to the nearest power of 2 as the circular convolution then becomes a linear one
// with enough zeros added. With padding from 360 to 512 we will get something inbetween.
(NF_FF_data) = cconv_c(Vphi, pattern_near);
(sphere_renormalized) = cconv_c(Vphi, pattern_sphere);

// Now we compare with the far field
r9 = db(mag(NF_FF_data));

// RCS pattern
r11 = teorSphereRcs*sqr(divi(mag(NF_FF_data), mag(sphere_renormalized)));
