epos_init();
epos_set_speed(2);

get_new_reference = true;
use_windowing = true;
NA=3;
N = 4096;
avg = 128;
avgType = 2;
threshold = 100;

// Values below specify the windowing function and are used only if use_windowing == true
// All values are from 0.0 to 1.0.
windowing0 = 0; // Until windowing0*N index all points on the windowing function are 0.
windowing1 = 0.1; // // Between windowing1*N and windowing2*N all points on the windowing function are 1.
windowing2 = 0.4;
windowing3 = 0.5; // After windowing3*N index all points on the windowing function are 0.

// minFreq and maxFreq are used at the acquisition stage,
// so should include all valid frequencies for a given hardware.
maxFreq = 18;
minFreq = 2;

path="C:\matlab_workplace\sig_1_Near.sig";
set_acquire_points(N);
set_averaging(avgType,avg);

angle = 0;
is_done  = 0;

acquire(1,b,2,base);
sig_add(path, base);
sig_delete_all(path);

if (get_new_reference)
{
	  get_new_reference = false;

	  n1=floor(N/10);
	  n2=N-floor(N/10);

	  w=b;
	  w=1;

	  for(i=0;i<n1;i=i+1){
	  w[i]=sqr(sqr(sin(i/n1*pi()/2)));
	  }

	  upper = N - n2;
	  for(i=0;i< upper;i=i+1){
	  index = n2 + i;
	  w[index]=sqr(sqr(sin(pi()*(upper - i)/(upper)/2)));
	  }
	  base2 = lf(base,6,8,-8);

	  pos = 0;
	  maxVal = max(base2,pos);
	  for (ia = 0; ia < N; ia = ia + 1)
	  {
		    if(base2[ia] < maxVal - threshold)
		    {
			      base2[ia] = 0;
		    }
		    else
		    {
			      base2[ia] = base2[ia] - (maxVal - threshold);
		    }
	  }
	  firstBase = base2;
}

if (use_windowing)
{
	  w3=firstBase;
	  n0 = windowing0 * N;
	  n1 = windowing1 * N;
	  n2 = windowing2 * N;
	  n3 = windowing3 * N;

	  w3=1;

	  for(i=0;i<n0;i=i+1)
	  {
		  w3[i]=0;
	  }
	  for(i=n0;i<n1;i=i+1)
	  {
		  w3[i]=sqr(sqr(sin((i - n0)/(n1 - n0)*pi()/2)));
	  }
	  upper = n3 - n2;
		  
	  for(i=0;i< upper;i=i+1)
	  {
		   index = n2 + i;
		   w3[index]=sqr(sqr(sin(pi()*(upper - i)/upper/2)));
	  }

	  for(i=n3;i<N;i=i+1)
	  {
		  w3[i]=0;
	  }
	  
	  r12 = w3; // Resulting windowing function
}

for(angle = 0;angle < 360;angle=angle + 1)
{
    epos_move_to_angle_deg(angle);	  
    while(is_done == 0)
    {
	  epos_get_status_and_position(angle,is_done);
    }
    is_done = 0;
    print_line(angle);
    
    summ = firstBase;
	  summ=0;
	  for(i=0;i<NA;i=i+1)
	  {
		    acquire(1,b,2,current);
		    current2 = lf(current,6,8,-8);
		    
		    pos = 0;
		    maxVal = max(current2,pos);
		    for (ia = 0; ia < N; ia = ia + 1)
		    {
			      if(current2[ia] < maxVal - threshold)
			      {
					current2[ia] = 0;
			      }
			      else
			      {
					current2[ia] = current2[ia] - (maxVal - threshold);
			      }
		    }
		    
		    (dt)=difference2(firstBase,current2);
		    dt = -dt;
		    (s2)=push2(b,dt);
		    summ=summ+s2;
	  }

	  b=lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6);
	  if (use_windowing)
	  {
		    b = b * w3;
	  }
	  sig_add(path, b);
}

