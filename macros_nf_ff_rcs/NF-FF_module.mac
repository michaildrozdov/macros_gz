// This macro calculates the NF-FF tranformation. Inputs are NF signal, background,
// the distance to the target and the target under test largest dimansion. The
// Transform (under usual conditions) requires that the NF measurement is completed
// in the full [0; 2pi) range.

//
// Input parameters:
//
clear_variables();
f = 5.0; // GHz, target frequency
D = 0.235; // Size of object
rho0 = 0.58; // m, measurement distance of NF
nf_signal_path = "C:\matlab_workplace\cylindrical_nf_ff\Newest\Sig_7_58.sig";
nf_background_path = "C:\matlab_workplace\cylindrical_nf_ff\Newest\Bcg_7_58.sig";

//
// Output parameters:
//
NF_FF_data = signal(1, 360, true);

total_measurements = sig_get_count(nf_signal_path); // Should be 360 always
test_signal = sig_read(nf_signal_path, 0);
N = count(test_signal);
T = window(test_signal);

c = 0.3; // m/ns, speed of light
k = 2 * pi() * f / c; // wave number
kind = 2; // "kind" of Hankel function to use
index_in_z = floor(f * T + 1);
out(index_in_z);

phis = signal(1, 360, false);
for (ia = 0; ia < 360; ia = ia + 1)
{
	  phis[ia] = ia * pi() / 180;
}

pattern_near = signal(1, 360, true); // E from the paper
pattern_near = 0;

out(N, total_measurements);

for (ia = 0; ia < total_measurements; ia = ia + 1)
{
	  near_td = sig_read(nf_signal_path, ia) - sig_read(nf_background_path, ia);
	  near_fd = fft(near_td);
	  pattern_near[ia] = near_fd[index_in_z];
}

max_order = floor(2 * k * D);
out(max_order);
argument = 2 * k * rho0; // This is the argument for Hankel function in (11)

// Precompute Hankel function results
hankel_array = signal(1, max_order*2 + 1, true);
j_powers = signal(1, max_order*2 + 1, true);

// Variables for Hankel function calculation
scaling = 1; //1 - no scaling, 2 - do scale
//this complex variable stores result
//must be prepared before call
hankel_result = 1 + j() * 1;

for (order = -max_order; order <= max_order; order = order + 1)
{
	  ierr = cbesh(argument,order,scaling,kind,hankel_result);
	  hankel_array[max_order + order] = hankel_result;
	  
	  // It should be just C++ modulo operator and switch statement as we calculate
	  // integer powers of j. 0th power gives 1, 1st power gives j, 2nd power gives -1,
	  // 3rd power gives -j, 4rth power gives 1 again.
	  reminder = order / 4 - floor(order / 4);
	  
	  if (reminder < 0.1) // Just 0
	  {
		    j_powers[max_order + order] = 1;
	  }
	  else
	  {
		    if (reminder < 0.35) // It is 0.25
		    {
			      j_powers[max_order + order] = 0 + j;
		    }
		    else
		    {
			      if (reminder < 0.6) // It is 0.5
			      {
					j_powers[max_order + order] = -1;
			      }
			      else
			      {
					// It is 0.75
					j_powers[max_order + order] = 0 - j;
			      }
		    }
	  }
}

// Precompute Vphy term
Vphi = signal(1, 360, true); 
Vphi = 0;

for (phi_index = 0; phi_index < 360; phi_index = phi_index + 1)
{
        phi = phis[phi_index];
        for (order = -max_order; order <= max_order; order = order + 1)
        {
		  order_index = order + max_order;
		  exp_argument = order * phi;
		  Vphi[phi_index] = Vphi[phi_index] + j_powers[order_index] * (cos(exp_argument) + j*sin(exp_argument)) / hankel_array[order_index];
        }
}

// Instead of the function below ifft(fft(Vphi)*conj(fft(pattern_near))) should produce same result.
// In macroprocessor we can't perform FFT on a complex signal and the result is not symmetric
// like it is assumed, so we can't drop negative frequencies after the FFT. Also, we should not do
// the zero-padding to the nearest power of 2 as the circular convolution then becomes a linear one
// with enough zeros added. With padding from 360 to 512 we will get something inbetween.
(NF_FF_data) = cconv_c(Vphi, pattern_near);

// Uncomment to see the output
//r9 = db(mag(NF_FF_data));

