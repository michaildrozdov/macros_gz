background= true;
measurement = true;
clear_variables();
//r = 1.943;
//r = 2.5;
//r=2.674;
r = 17.5;//cm
//r=3.575;
threshold = 100; // Used in the reference signal preprocessing, set 0 to ignore the reference.
NA=10;
N = 4096;
avg = 256;
avgType = 2;
calibrationPath = "C:/matlab_workplace/cylindrical_nf_ff/calibration.sig";

// minFreq and maxFreq are used at the acquisition stage,
// so should include all valid frequencies for a given hardware.
maxFreq = 18;
minFreq = 2;

set_acquire_points(N);
set_averaging(avgType,avg);

if (measurement)
{
	  if (background)
	  {
		    print_line("Calibration sphere background measurement started.");
		    acquire(1,b,2,base);
		    N=count(b);
		    n1=floor(N/10);
		    n2=N-floor(N/10);
		  
		    w=b;
		    w=1;

		    for(i=0;i<n1;i=i+1){
		    w[i]=sqr(sqr(sin(i/n1*pi()/2)));
		    }

		    upper = N - n2;
		    for(i=0;i< upper;i=i+1){
		    index = n2 + i;
		    w[index]=sqr(sqr(sin(pi()*(upper - i)/(upper)/2)));
		    }
		   base2 = lf(base,6,8,-8);
		   
		    pos = 0;
		    maxVal = max(base2,pos);
		    for (ia = 0; ia < N; ia = ia + 1)
		    {
			      if(base2[ia] < maxVal - threshold)
			      {
					base2[ia] = 0;
			      }
			      else
			      {
					base2[ia] = base2[ia] - (maxVal - threshold);
			      }
		    }
		    firstBase = base2;
		    
		    summ=base;
		    summ=0;
		    for(i=0;i<NA;i=i+1)
		    {
			      acquire(1,b,2,current);
			      current2 = lf(current,6,8,-8);
			      
			      pos = 0;
			      maxVal = max(current2,pos);
			      for (ia = 0; ia < N; ia = ia + 1)
			      {
					if(current2[ia] < maxVal - threshold)
					{
						  current2[ia] = 0;
					}
					else
					{
						  current2[ia] = current2[ia] - (maxVal - threshold);
					}
			      }
			      
			      (dt)=difference2(base2,current2);
			      dt = -dt;
			      (s2)=push2(b,dt);
			      summ=summ+s2;
		    }
		    
		    b=lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6);
		    print_line("Calibration sphere background measurement finished.");
		    pause();
	  }

	  print_line("Calibration sphere measurement started.");
	  summ=base;
	  summ=0;
	  
	  sig_add(calibrationPath,base2);
	  sig_delete_all(calibrationPath);
	  
	  for(i=0;i<NA;i=i+1){
		    acquire(1,sig,2,current);
		    current[N/2] = 3*threshold; // Fake pulse
		    current2 = lf(current,6,8,-8);
		    pos = 0;
		    maxVal = max(current2,pos);
		    for (ia = 0; ia < N; ia = ia + 1)
		    {
			      if(current2[ia] < maxVal - threshold)
			      {
					current2[ia] = 0;
			      }
			      else
			      {
					current2[ia] = current2[ia] - (maxVal - threshold);
			      }
		    }
		    (dt)=difference2(base2,current2);
		    dt = -dt;
		    (s2)=push2(sig,dt);
		    summ=summ+s2;
	  }
	  m1=lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6)-b;
	  calibrationSignal=m1*w;
	  r10 = lf(w*hf(summ/NA,minFreq,0.5*minFreq,-6),maxFreq,maxFreq*1.1,-6);
	  r11 = b;
	  r1 = calibrationSignal;
	  print_line("Calibration sphere measurement finished.");
	  
	  w3=r1;
	  freqN=count(w3);
	  n0 = 0*freqN;
	  n1 = 0.1*freqN;
	  n2 = 0.4*freqN;
	  n3 = 0.5*freqN;

	  w3=1;

	  for(i=0;i<n0;i=i+1)
	  {
		  w3[i]=0;
	  }
	  for(i=n0;i<n1;i=i+1)
	  {
		  w3[i]=sqr(sqr(sin((i - n0)/(n1 - n0)*pi()/2)));
	  }
	  upper = n3 - n2;
		  
	  for(i=0;i< upper;i=i+1)
	  {
		   index = n2 + i;
		   w3[index]=sqr(sqr(sin(pi()*(upper - i)/upper/2)));
	  }

	  for(i=n3;i<freqN;i=i+1)
	  {
		  w3[i]=0;
	  }

	  calibrationSignalWindowed = calibrationSignal*w3;
	  
	  sig_add(calibrationPath,calibrationSignal);
	  sig_add(calibrationPath,calibrationSignalWindowed);
	  sig_add(calibrationPath,w3);
	  sig_add(calibrationPath,base2);
}
else
{
	  calibrationSignal = sig_read(calibrationPath, 0);
	  calibrationSignalWindowed = sig_read(calibrationPath, 1);
	  w3 = sig_read(calibrationPath, 2);
	  base2 = sig_read(calibrationPath, 3);
}