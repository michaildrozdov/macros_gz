clear_variables();
range = 4840;
get_signals = true;


num_of_steps = 16;
path = "C:/Users/User1/Documents/signals.sig";
transx=Signal(1,4,False);
transy=Signal(1,4,False);
positionx = Signal(1,16,False);
positiony = Signal(1,16,False);

transx[0]=743;
transy[0]=91;

transx[1]=825;
transy[1]=-91;

transx[2]=-743;
transy[2]=-91;

transx[3]=-825;
transy[3]=91;

positionx[0]=526;
positionx[1]=608;
positionx[2]=364;
positionx[3]=446;
positionx[4]=202;
positionx[5]=284;
positionx[6]=40;
positionx[7]=122;
positionx[8]=-122;
positionx[9]=-40;
positionx[10]=-284;
positionx[11]=-202;
positionx[12]=-446;
positionx[13]=-364;
positionx[14]=-608;
positionx[15]=-526;

positiony[0]=91;
positiony[1]=-91;
positiony[2]=91;
positiony[3]=-91;
positiony[4]=91;
positiony[5]=-91;
positiony[6]=91;
positiony[7]=-91;
positiony[8]=91;
positiony[9]=-91;
positiony[10]=91;
positiony[11]=-91;
positiony[12]=91;
positiony[13]=-91;
positiony[14]=91;
positiony[15]=-91;
if (get_signals)
{
sleep(2000);
	sig_add(path, r1);
	sig_delete_all(path);

	W=WINDOW(ch1);
	N=count(ch1);
	shift = 5*N/W;
	mt = matrix(num_of_steps*4,N);
	signals = matrix(64,N/2);

	set_trans_mask(15);
	set_trans_mask(14);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);


	set_matrix_row(mt,0,back1);
	set_matrix_row(mt,1,push(back1,-shift));
	set_matrix_row(mt,2,back2);
	set_matrix_row(mt,3,push(back2,-shift));
	set_matrix_row(mt,4,back3);
	set_matrix_row(mt,5,push(back3,-shift));
	set_matrix_row(mt,6,back4);
	set_matrix_row(mt,7,push(back4,-shift));
	set_matrix_row(mt,8,back5);
	set_matrix_row(mt,9,push(back5,-shift));
	set_matrix_row(mt,10,back6);
	set_matrix_row(mt,11,push(back6,-shift));
	set_matrix_row(mt,12,back7);
	set_matrix_row(mt,13,push(back7,-shift));
	set_matrix_row(mt,14,back8);
	set_matrix_row(mt,15,push(back8,-shift));
	
	set_trans_mask(15);
	set_trans_mask(13);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,16,back1);
	set_matrix_row(mt,17,push(back1,-shift));
	set_matrix_row(mt,18,back2);
	set_matrix_row(mt,19,push(back2,-shift));
	set_matrix_row(mt,20,back3);
	set_matrix_row(mt,21,push(back3,-shift));
	set_matrix_row(mt,22,back4);
	set_matrix_row(mt,23,push(back4,-shift));
	set_matrix_row(mt,24,back5);
	set_matrix_row(mt,25,push(back5,-shift));
	set_matrix_row(mt,26,back6);
	set_matrix_row(mt,27,push(back6,-shift));
	set_matrix_row(mt,28,back7);
	set_matrix_row(mt,29,push(back7,-shift));
	set_matrix_row(mt,30,back8);
	set_matrix_row(mt,31,push(back8,-shift));

	set_trans_mask(15);
	set_trans_mask(11);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,32,back1);
	set_matrix_row(mt,33,push(back1,-shift));
	set_matrix_row(mt,34,back2);
	set_matrix_row(mt,35,push(back2,-shift));
	set_matrix_row(mt,36,back3);
	set_matrix_row(mt,37,push(back3,-shift));
	set_matrix_row(mt,38,back4);
	set_matrix_row(mt,39,push(back4,-shift));
	set_matrix_row(mt,40,back5);
	set_matrix_row(mt,41,push(back5,-shift));
	set_matrix_row(mt,42,back6);
	set_matrix_row(mt,43,push(back6,-shift));
	set_matrix_row(mt,44,back7);
	set_matrix_row(mt,45,push(back7,-shift));
	set_matrix_row(mt,46,back8);
	set_matrix_row(mt,47,push(back8,-shift));

	set_trans_mask(15);
	set_trans_mask(7);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);


	set_matrix_row(mt,48,back1);
	set_matrix_row(mt,49,push(back1,-shift));
	set_matrix_row(mt,50,back2);
	set_matrix_row(mt,51,push(back2,-shift));
	set_matrix_row(mt,52,back3);
	set_matrix_row(mt,53,push(back3,-shift));
	set_matrix_row(mt,54,back4);
	set_matrix_row(mt,55,push(back4,-shift));
	set_matrix_row(mt,56,back5);
	set_matrix_row(mt,57,push(back5,-shift));
	set_matrix_row(mt,58,back6);
	set_matrix_row(mt,59,push(back6,-shift));
	set_matrix_row(mt,60,back7);
	set_matrix_row(mt,61,push(back7,-shift));
	set_matrix_row(mt,62,back8);
	set_matrix_row(mt,63,push(back8,-shift));

	set_trans_mask(15);
	set_trans_mask(14);
	pause();
	sleep(2000);

	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,0, back1 - get_matrix_row(mt, 0));
	set_matrix_row(mt,1, push(back1,-shift) - get_matrix_row(mt, 1));
	set_matrix_row(mt,2, back2 - get_matrix_row(mt, 2));
	set_matrix_row(mt,3, push(back2,-shift) - get_matrix_row(mt, 3));
	set_matrix_row(mt,4, back3 - get_matrix_row(mt, 4));
	set_matrix_row(mt,5, push(back3,-shift) - get_matrix_row(mt, 5));
	set_matrix_row(mt,6, back4 - get_matrix_row(mt, 6));
	set_matrix_row(mt,7, push(back4,-shift) - get_matrix_row(mt, 7));
	set_matrix_row(mt,8, back5 - get_matrix_row(mt, 8));
	set_matrix_row(mt,9, push(back5,-shift) - get_matrix_row(mt, 9));
	set_matrix_row(mt,10, back6 - get_matrix_row(mt, 10));
	set_matrix_row(mt,11, push(back6,-shift) - get_matrix_row(mt, 11));
	set_matrix_row(mt,12, back7 - get_matrix_row(mt, 12));
	set_matrix_row(mt,13, push(back7,-shift) - get_matrix_row(mt, 13));
	set_matrix_row(mt,14, back8 - get_matrix_row(mt, 14));
	set_matrix_row(mt,15, push(back8,-shift) - get_matrix_row(mt, 15));

	set_trans_mask(15);
	set_trans_mask(13);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,16, back1 - get_matrix_row(mt, 16));
	set_matrix_row(mt,17, push(back1,-shift) - get_matrix_row(mt, 17));
	set_matrix_row(mt,18, back2 - get_matrix_row(mt, 18));
	set_matrix_row(mt,19, push(back2,-shift) - get_matrix_row(mt, 19));
	set_matrix_row(mt,20, back3 - get_matrix_row(mt, 20));
	set_matrix_row(mt,21, push(back3,-shift) - get_matrix_row(mt, 21));
	set_matrix_row(mt,22, back4 - get_matrix_row(mt, 22));
	set_matrix_row(mt,23, push(back4,-shift) - get_matrix_row(mt, 23));
	set_matrix_row(mt,24, back5 - get_matrix_row(mt, 24));
	set_matrix_row(mt,25, push(back5,-shift) - get_matrix_row(mt, 25));
	set_matrix_row(mt,26, back6 - get_matrix_row(mt, 26));
	set_matrix_row(mt,27, push(back6,-shift) - get_matrix_row(mt, 27));
	set_matrix_row(mt,28, back7 - get_matrix_row(mt, 28));
	set_matrix_row(mt,29, push(back7,-shift) - get_matrix_row(mt, 29));
	set_matrix_row(mt,30, back8 - get_matrix_row(mt, 30));
	set_matrix_row(mt,31, push(back8,-shift) - get_matrix_row(mt, 31));


	set_trans_mask(15);
	set_trans_mask(11);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,32, back1 - get_matrix_row(mt, 32));
	set_matrix_row(mt,33, push(back1,-shift) - get_matrix_row(mt, 33));
	set_matrix_row(mt,34, back2 - get_matrix_row(mt, 34));
	set_matrix_row(mt,35, push(back2,-shift) - get_matrix_row(mt, 35));
	set_matrix_row(mt,36, back3 - get_matrix_row(mt, 36));
	set_matrix_row(mt,37, push(back3,-shift) - get_matrix_row(mt, 37));
	set_matrix_row(mt,38, back4 - get_matrix_row(mt, 38));
	set_matrix_row(mt,39, push(back4,-shift) - get_matrix_row(mt, 39));
	set_matrix_row(mt,40, back5 - get_matrix_row(mt, 40));
	set_matrix_row(mt,41, push(back5,-shift) - get_matrix_row(mt, 41));
	set_matrix_row(mt,42, back6 - get_matrix_row(mt, 42));
	set_matrix_row(mt,43, push(back6,-shift) - get_matrix_row(mt, 43));
	set_matrix_row(mt,44, back7 - get_matrix_row(mt, 44));
	set_matrix_row(mt,45, push(back7,-shift) - get_matrix_row(mt, 45));
	set_matrix_row(mt,46, back8 - get_matrix_row(mt, 46));
	set_matrix_row(mt,47, push(back8,-shift) - get_matrix_row(mt, 47));

	set_trans_mask(15);
	set_trans_mask(7);
	sleep(150);
	//acquire(255,255);
	acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

	set_matrix_row(mt,48, back1 - get_matrix_row(mt, 48));
	set_matrix_row(mt,49, push(back1,-shift) - get_matrix_row(mt, 49));
	set_matrix_row(mt,50, back2 - get_matrix_row(mt, 50));
	set_matrix_row(mt,51, push(back2,-shift) - get_matrix_row(mt, 51));
	set_matrix_row(mt,52, back3 - get_matrix_row(mt, 52));
	set_matrix_row(mt,53, push(back3,-shift) - get_matrix_row(mt, 53));
	set_matrix_row(mt,54, back4 - get_matrix_row(mt, 54));
	set_matrix_row(mt,55, push(back4,-shift) - get_matrix_row(mt, 55));
	set_matrix_row(mt,56, back5 - get_matrix_row(mt, 56));
	set_matrix_row(mt,57, push(back5,-shift) - get_matrix_row(mt, 57));
	set_matrix_row(mt,58, back6 - get_matrix_row(mt, 58));
	set_matrix_row(mt,59, push(back6,-shift) - get_matrix_row(mt, 59));
	set_matrix_row(mt,60, back7 - get_matrix_row(mt, 60));
	set_matrix_row(mt,61, push(back7,-shift) - get_matrix_row(mt, 61));
	set_matrix_row(mt,62, back8 - get_matrix_row(mt, 62));
	set_matrix_row(mt,63, push(back8,-shift) - get_matrix_row(mt, 63));


	for (ia = 0; ia < 64; ia = ia + 1)
	{
		sig_add(path,get_matrix_row(mt, ia));
	}
}
else
{
	W=WINDOW(ch1);
	N=count(ch1);
	shift = 5*N/W;
	mt = matrix(num_of_steps*4,N);
	signals = matrix(64,N/2);
}

c = 300.0; 
 
dN = N/W; 
dNc = dN/c; 

for (ia = 0; ia<4*num_of_steps; ia=ia+1)
{
	set_matrix_row(signals,ia, split(SIG_READ(path,ia),0,N/2-1));	
}

r1 = lf(get_matrix_row(signals,0),6,10,-6);
r2 = lf(get_matrix_row(signals,1),6,10,-6);
r3 = lf(get_matrix_row(signals,2),6,10,-6);
r4 = lf(get_matrix_row(signals,3),6,10,-6);
r5 = lf(get_matrix_row(signals,16),6,10,-6);
r6 = lf(get_matrix_row(signals,17),6,10,-6);
r7 = lf(get_matrix_row(signals,18),6,10,-6);
r8 = lf(get_matrix_row(signals,19),6,10,-6);
//r9 = lf(get_matrix_row(signals,8),6,10,-6);
//r10 = lf(get_matrix_row(signals,9),6,10,-6);
//r11 = lf(get_matrix_row(signals,10),6,10,-6);
//r12 = lf(get_matrix_row(signals,11),6,10,-6);

ro = signal(1,16,false);
ro2 = signal(1,4,false);
delays = signal(1,16,false);
delays2 = signal(1,4,false);
pos = 0;

for (ia = 0; ia<num_of_steps; ia=ia+1)
{

	ro[ia] = sqrt(positionx[ia]*positionx[ia] + positiony[ia]*positiony[ia] + range*range)*dNc - sqrt(positionx[0]*positionx[0] + positiony[0]*positiony[0] + range*range)*dNc;


	m = max(lf(get_matrix_row(signals,ia),6,10,-6),pos);
	delays[ia] = pos;
}
//pos = delays[0];
delays = 0;
for (ia = 0; ia<num_of_steps; ia=ia+1)
{
	delays[ia] = delays[ia] - pos - ro[ia];
	//ro[ia] = sqrt(positionx[ia]*positionx[ia] + positiony[ia]*positiony[ia] + range*range)*dNc - sqrt(positionx[0]*positionx[0] + positiony[0]*positiony[0] + range*range)*dNc;
	//delays[ia] = -ro[ia] + autocorrelation_delay(get_matrix_row(signals, ia), get_matrix_row(signals, 0));
}

r15 = delays;
sig_add("C:/Users/User1/Documents/delays.sig",delays);
sig_delete_all("C:/Users/User1/Documents/delays.sig");
sig_add("C:/Users/User1/Documents/delays.sig",delays);

for (ia = 0; ia<4; ia=ia+1)
{

	ro2[ia] = sqrt(transx[ia]*transx[ia] + transy[ia]*transy[ia] + range*range)*dNc - sqrt(transx[0]*transx[0] + transy[0]*transy[0] + range*range)*dNc;

	m = max(lf(get_matrix_row(signals,ia*16),6,10,-6),pos);
	delays2[ia] = pos;
}
//pos = delays2[0];
delays2 = 0;
for (ia = 0; ia<4; ia=ia+1)
{
	  //delays2[ia] = delays2[ia] - pos -ro2[ia];
	  ro2[ia] = sqrt(transx[ia]*transx[ia] + transy[ia]*transy[ia] + range*range)*dNc - sqrt(transx[0]*transx[0] + transy[0]*transy[0] + range*range)*dNc;
	  delays2[ia] = - ro2[ia] + autocorrelation_delay(get_matrix_row(signals, ia*16), get_matrix_row(signals, 0));
}

r16 = delays2;

sig_add("C:/Users/User1/Documents/delays_trans.sig",delays2);
sig_delete_all("C:/Users/User1/Documents/delays_trans.sig");
sig_add("C:/Users/User1/Documents/delays_trans.sig",delays2);



//validation
validationSignal = get_matrix_row(signals,0);
validationSignal = 0;
maxValue1 = 0;
for (ka = 0; ka < 4; ka = ka + 1)
{
	  rotrans = sqrt(transx[ka]*transx[ka] + transy[ka]*transy[ka] + range*range)*dNc - sqrt(transx[0]*transx[0] + transy[0]*transy[0] + range*range)*dNc;
	  for (ia = 0; ia<num_of_steps; ia=ia+1)
	  {
		    rorec = sqrt(positionx[ia]*positionx[ia] + positiony[ia]*positiony[ia] + range*range)*dNc - sqrt(positionx[0]*positionx[0] + positiony[0]*positiony[0] + range*range)*dNc;
		    currentSignal = push(lf(get_matrix_row(signals,ia + ka*16), 6,10,-6),-delays[ia]-delays2[ka] - rotrans - rorec);
		    validationSignal = validationSignal + currentSignal;
		    maxValue1 = maxValue1 + max(currentSignal, pos);

	  }
}
maxValue2 = max(validationSignal,pos);
r9 = validationSignal;
quality = maxValue2/maxValue1;
out(maxValue1, maxValue2, quality);
