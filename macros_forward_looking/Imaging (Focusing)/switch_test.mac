//macro for switch test
//connect 1st output of switch to ch1
//connect 2nd output of switch to ch2
//connect 3rd output of switch to ch3
//connect 4th output of switch to ch4
//macro will first acquire reference signals for each switching channel, then run through all switch channels some number (defined by switches) times
//and measure extremum value of difference between current signal and base signal
//difference is filtered before measuring amplitudes
//r1, r2, r3, r4 are used as outputs
//if switches is set to value higher than 1, standard deviations of extremum amplitudes for each switch channel are shown in variables window
//measurement signals stored to measuredSignals1, measuredSignals2, measuredSignals3, measuredSignals4
clear_variables();

maxFreq = 10;
switches = 1;//number of switches to be made
pausems = 150;//pause between each switch inside once cycle
pauseCyclems = 2000;//pause between cycles


T=WINDOW(ch1);
N=count(ch1);
measuredExtremums1 = signal(1,switches,false);
measuredExtremums2 = signal(1,switches,false);
measuredExtremums3 = signal(1,switches,false);
measuredExtremums4 = signal(1,switches,false);
measuredExtremums1 = 0;
measuredExtremums2 = 0;
measuredExtremums3 = 0;
measuredExtremums4 = 0;
measuredSignals1 = matrix(switches, N);
measuredSignals2 = matrix(switches, N);
measuredSignals3 = matrix(switches, N);
measuredSignals4 = matrix(switches, N);

baseSignals = matrix(4,N);

set_trans_mask(15);
set_trans_mask(14);
sleep(pausems);

acquire(1, back1);
set_matrix_row(baseSignals,0,back1);
	
set_trans_mask(15);
set_trans_mask(13);
sleep(pausems);

acquire(2, back2);
set_matrix_row(baseSignals,1,back2);

set_trans_mask(15);
set_trans_mask(11);
sleep(pausems);

acquire(3, back3);
set_matrix_row(baseSignals,2,back3);

set_trans_mask(15);
set_trans_mask(7);
sleep(pausems);

acquire(4,back4);
set_matrix_row(baseSignals,3,back4);

set_trans_mask(15);
set_trans_mask(14);
sleep(pauseCyclems);

for (ia = 0; ia < switches; ia = ia +1)
{
	  acquire(1, back1);
	  tempSig = get_matrix_row(baseSignals, 0);
	  set_label(tempSig,T,"ns","mV");
	  (dt)=difference2(tempSig,back1);
	  dt = -dt;
	  tempSig = push2(tempSig,dt);
	  differSignal = lf(back1- tempSig, maxFreq, 1.5*maxFreq, -6);
	  pos = 0;
	  maxVal = max(differSignal, pos);
	  minVal = -min(differSignal, pos);
	  if (maxVal > minVal)
	  {
		    measuredExtremums1[ia] = maxVal;
	  }
	  else
	  {
		    measuredExtremums1[ia] = minVal;
	  }
	  set_matrix_row(measuredSignals1, ia, back1);
		  
	  set_trans_mask(15);
	  set_trans_mask(13);
	  sleep(pausems);

	  acquire(2, back2);
	  tempSig = get_matrix_row(baseSignals, 1);
	  set_label(tempSig,T,"ns","mV");
	  (dt)=difference2(tempSig,back2);
	  dt = -dt;
	  tempSig = push2(tempSig,dt);
	  differSignal = lf(back2- tempSig, maxFreq, 1.5*maxFreq, -6);
	  pos = 0;
	  maxVal = max(differSignal, pos);
	  minVal = -min(differSignal, pos);
	  if (maxVal > minVal)
	  {
		    measuredExtremums2[ia] = maxVal;
	  }
	  else
	  {
		    measuredExtremums2[ia] = minVal;
	  }
	  set_matrix_row(measuredSignals1, ia, back1);

	  set_trans_mask(15);
	  set_trans_mask(11);
	  sleep(pausems);

	  acquire(3, back3);
	  tempSig = get_matrix_row(baseSignals, 2);
	  set_label(tempSig,T,"ns","mV");
	  (dt)=difference2(tempSig,back3);
	  dt = -dt;
	  tempSig = push2(tempSig,dt);
	  differSignal = lf(back3- tempSig, maxFreq, 1.5*maxFreq, -6);
	  pos = 0;
	  maxVal = max(differSignal, pos);
	  minVal = -min(differSignal, pos);
	  if (maxVal > minVal)
	  {
		    measuredExtremums3[ia] = maxVal;
	  }
	  else
	  {
		    measuredExtremums3[ia] = minVal;
	  }
	  set_matrix_row(measuredSignals1, ia, back1);

	  set_trans_mask(15);
	  set_trans_mask(7);
	  sleep(pausems);

	  acquire(4,back4);
	  tempSig = get_matrix_row(baseSignals, 3);
	  set_label(tempSig,T,"ns","mV");
	  (dt)=difference2(tempSig,back4);
	  dt = -dt;
	  tempSig = push2(tempSig,dt);
	  differSignal = lf(back4- tempSig, maxFreq, 1.5*maxFreq, -6);
	  pos = 0;
	  maxVal = max(differSignal, pos);
	  minVal = -min(differSignal, pos);
	  if (maxVal > minVal)
	  {
		    measuredExtremums4[ia] = maxVal;
	  }
	  else
	  {
		    measuredExtremums4[ia] = minVal;
	  }
	  set_matrix_row(measuredSignals1, ia, back1);

	  set_trans_mask(15);
	  set_trans_mask(14);
	  
	  sleep(pauseCyclems);
}
	
r1 = measuredExtremums1;
r2 = measuredExtremums2;
r3 = measuredExtremums3;
r4 = measuredExtremums4;

if (switches > 1)
{
	  rms_of_extremums_switch1 = stdev(r1);
	  rms_of_extremums_switch2 = stdev(r2);
	  rms_of_extremums_switch3 = stdev(r3);
	  rms_of_extremums_switch4 = stdev(r4);
	  
	  mean_of_extremums_switch1 = mean(r1);
	  mean_of_extremums_switch2 = mean(r2);
	  mean_of_extremums_switch3 = mean(r3);
	  mean_of_extremums_switch4 = mean(r4);
	  out(rms_of_extremums_switch4, rms_of_extremums_switch3, rms_of_extremums_switch2, rms_of_extremums_switch1);
	  out(mean_of_extremums_switch4, mean_of_extremums_switch3, mean_of_extremums_switch2, mean_of_extremums_switch1);
}