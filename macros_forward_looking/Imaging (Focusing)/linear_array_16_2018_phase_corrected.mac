clear_variables();
threshold = 7;//detction level
reps = 3;


object_step = 40; //object space grid calculation step, mm
range = 2000;//distance from aperture of array to test area surface, mm
MaxX = 100.0;//number of calculation points on grid along x (left-right)
MaxY = 100.0;//number of calculation points on grid along y (front-back)
MaxZ = 100.0;//number of calculation points on grid along z (top-bottom)
get_signals = true;
measure_background = true;
measure_object = true;
corrected_delays = false;
trans = 3;
pauseDuration = 4;//how long to wait before background and before measurement,s



path = "C:/data/signals.sig";
background_path = "C:/data/linear_background.sig";
num_of_steps = 16;
transx=Signal(1,4,False);
transy=Signal(1,4,False);
positionx = Signal(1,16,False);
positiony = Signal(1,16,False);

transx[0]=743;
transy[0]=91;

transx[1]=825;
transy[1]=-91;

transx[2]=-743;
transy[2]=-91;

transx[3]=-825;
transy[3]=91;

positionx[0]=526;
positionx[1]=608;
positionx[2]=364;
positionx[3]=446;
positionx[4]=202;
positionx[5]=284;
positionx[6]=40;
positionx[7]=122;
positionx[8]=-122;
positionx[9]=-40;
positionx[10]=-284;
positionx[11]=-202;
positionx[12]=-446;
positionx[13]=-364;
positionx[14]=-608;
positionx[15]=-526;

positiony[0]=91;
positiony[1]=-91;
positiony[2]=91;
positiony[3]=-91;
positiony[4]=91;
positiony[5]=-91;
positiony[6]=91;
positiony[7]=-91;
positiony[8]=91;
positiony[9]=-91;
positiony[10]=91;
positiony[11]=-91;
positiony[12]=91;
positiony[13]=-91;
positiony[14]=91;
positiony[15]=-91;


if (get_signals)
{
	if (measure_object)
	{
		sig_add(path,r1);
		sig_delete_all(path);
	}
	if (measure_background)
	{
		sig_add(background_path,r1);
		sig_delete_all(background_path);
	}

	W=WINDOW(ch1);
	N=count(ch1);
	shiftp = 5*N/W;
	out(shiftp);
	mt = matrix(num_of_steps*4*reps,N);
	diffs = matrix(64, N);
	A=matrix(MaxY,MaxX);
	signals = matrix(64,N/2);
	
	if (measure_background)
	{
		  sleep(pauseDuration*1000);
		  set_trans_mask(15);
		  set_trans_mask(14);
		  sleep(550);
		  //acquire(255,255);
		  for (ka = 0; ka < reps; ka = ka + 1)
		  {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

			      n1=floor(N/10);
			      n2=N-floor(N/10);
			      w2=back1;
			      w2=1;

			      for(i=0;i<n1;i=i+1)
			      {
					w2[i]=sqr(sqr(sin(i/n1*pi()/2)));
			      }

			      upper = N - n2;
			      for(i=0;i< upper;i=i+1)
			      {
					index = n2 + i;
					w2[index]=sqr(sqr(sin(pi()*(upper - i)/(upper)/2)));
			      }
			      base01 = w2*lf(back1,4,6,-8);
			      base02 = w2*lf(back2,4,6,-8);
			      base03 = w2*lf(back3,4,6,-8);
			      base04 = w2*lf(back4,4,6,-8);
			      base05 = w2*lf(back5,4,6,-8);
			      base06 = w2*lf(back6,4,6,-8);
			      base07 = w2*lf(back7,4,6,-8);
			      base08 = w2*lf(back8,4,6,-8);
			      
			      r11 = base01;

			    set_matrix_row(mt,ka*64 + 0,base01);
			    set_matrix_row(mt,ka*64 + 1,push(base01,-shiftp));
			    set_matrix_row(mt,ka*64 + 2,base02);
			    set_matrix_row(mt,ka*64 + 3,push(base02,-shiftp));
			    set_matrix_row(mt,ka*64 + 4,base03);
			    set_matrix_row(mt,ka*64 + 5,push(base03,-shiftp));
			    set_matrix_row(mt,ka*64 + 6,base04);
			    set_matrix_row(mt,ka*64 + 7,push(base04,-shiftp));
			    set_matrix_row(mt,ka*64 + 8,base05);
			    set_matrix_row(mt,ka*64 + 9,push(base05,-shiftp));
			    set_matrix_row(mt,ka*64 + 10,base06);
			    set_matrix_row(mt,ka*64 + 11,push(base06,-shiftp));
			    set_matrix_row(mt,ka*64 + 12,base07);
			    set_matrix_row(mt,ka*64 + 13,push(base07,-shiftp));
			    set_matrix_row(mt,ka*64 + 14,base08);
			    set_matrix_row(mt,ka*64 + 15,push(base08,-shiftp));
		  }
		  
		  
		    set_trans_mask(15);
		    set_trans_mask(13);
		    sleep(150);
		    //acquire(255,255);
		    for (ka = 0; ka < reps; ka = ka + 1)
		    {
			      acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

			      base11 = w2*lf(back1,4,6,-8);
			      base12 = w2*lf(back2,4,6,-8);
			      base13 = w2*lf(back3,4,6,-8);
			      base14 = w2*lf(back4,4,6,-8);
			      base15 = w2*lf(back5,4,6,-8);
			      base16 = w2*lf(back6,4,6,-8);
			      base17 = w2*lf(back7,4,6,-8);
			      base18 = w2*lf(back8,4,6,-8);
			      
			      set_matrix_row(mt,ka*64 + 16,base11);
			      set_matrix_row(mt,ka*64 + 17,push(base11,-shiftp));
			      set_matrix_row(mt,ka*64 + 18,base12);
			      set_matrix_row(mt,ka*64 + 19,push(base12,-shiftp));
			      set_matrix_row(mt,ka*64 + 20,base13);
			      set_matrix_row(mt,ka*64 + 21,push(base13,-shiftp));
			      set_matrix_row(mt,ka*64 + 22,base14);
			      set_matrix_row(mt,ka*64 + 23,push(base14,-shiftp));
			      set_matrix_row(mt,ka*64 + 24,base15);
			      set_matrix_row(mt,ka*64 + 25,push(base15,-shiftp));
			      set_matrix_row(mt,ka*64 + 26,base16);
			      set_matrix_row(mt,ka*64 + 27,push(base16,-shiftp));
			      set_matrix_row(mt,ka*64 + 28,base17);
			      set_matrix_row(mt,ka*64 + 29,push(base17,-shiftp));
			      set_matrix_row(mt,ka*64 + 30,base18);
			      set_matrix_row(mt,ka*64 + 31,push(base18,-shiftp));
		  }

		  set_trans_mask(15);
		  set_trans_mask(11);
		  sleep(150);
		  //acquire(255,255);
		    for (ka = 0; ka < reps; ka = ka + 1)
		    {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

			      base21 = w2*lf(back1,4,6,-8);
			      base22 = w2*lf(back2,4,6,-8);
			      base23 = w2*lf(back3,4,6,-8);
			      base24 = w2*lf(back4,4,6,-8);
			      base25 = w2*lf(back5,4,6,-8);
			      base26 = w2*lf(back6,4,6,-8);
			      base27 = w2*lf(back7,4,6,-8);
			      base28 = w2*lf(back8,4,6,-8);
			    set_matrix_row(mt,ka*64 + 32,base21);
			    set_matrix_row(mt,ka*64 + 33,push(base21,-shiftp));
			    set_matrix_row(mt,ka*64 + 34,base22);
			    set_matrix_row(mt,ka*64 + 35,push(base22,-shiftp));
			    set_matrix_row(mt,ka*64 + 36,base23);
			    set_matrix_row(mt,ka*64 + 37,push(base23,-shiftp));
			    set_matrix_row(mt,ka*64 + 38,base24);
			    set_matrix_row(mt,ka*64 + 39,push(base24,-shiftp));
			    set_matrix_row(mt,ka*64 + 40,base25);
			    set_matrix_row(mt,ka*64 + 41,push(base25,-shiftp));
			    set_matrix_row(mt,ka*64 + 42,base26);
			    set_matrix_row(mt,ka*64 + 43,push(base26,-shiftp));
			    set_matrix_row(mt,ka*64 + 44,base27);
			    set_matrix_row(mt,ka*64 + 45,push(base27,-shiftp));
			    set_matrix_row(mt,ka*64 + 46,base28);
			    set_matrix_row(mt,ka*64 + 47,push(base28,-shiftp));
		    }

		  set_trans_mask(15);
		  set_trans_mask(7);
		  sleep(150);
		  //acquire(255,255);
		  for (ka = 0; ka < reps; ka = ka + 1)
		    {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);

			      base31 = w2*lf(back1,4,6,-8);
			      base32 = w2*lf(back2,4,6,-8);
			      base33 = w2*lf(back3,4,6,-8);
			      base34 = w2*lf(back4,4,6,-8);
			      base35 = w2*lf(back5,4,6,-8);
			      base36 = w2*lf(back6,4,6,-8);
			      base37 = w2*lf(back7,4,6,-8);
			      base38 = w2*lf(back8,4,6,-8);

			    set_matrix_row(mt,ka*64 + 48,base31);
			    set_matrix_row(mt,ka*64 + 49,push(base31,-shiftp));
			    set_matrix_row(mt,ka*64 + 50,base32);
			    set_matrix_row(mt,ka*64 + 51,push(base32,-shiftp));
			    set_matrix_row(mt,ka*64 + 52,base33);
			    set_matrix_row(mt,ka*64 + 53,push(base33,-shiftp));
			    set_matrix_row(mt,ka*64 + 54,base34);
			    set_matrix_row(mt,ka*64 + 55,push(base34,-shiftp));
			    set_matrix_row(mt,ka*64 + 56,base35);
			    set_matrix_row(mt,ka*64 + 57,push(base35,-shiftp));
			    set_matrix_row(mt,ka*64 + 58,base36);
			    set_matrix_row(mt,ka*64 + 59,push(base36,-shiftp));
			    set_matrix_row(mt,ka*64 + 60,base37);
			    set_matrix_row(mt,ka*64 + 61,push(base37,-shiftp));
			    set_matrix_row(mt,ka*64 + 62,base38);
			    set_matrix_row(mt,ka*64 + 63,push(base38,-shiftp));
		  }


		  for (ia = 0; ia < reps*64; ia = ia + 1)
		  {
			  sig_add(background_path,get_matrix_row(mt, ia));
		  }

		  set_trans_mask(15);
		  set_trans_mask(14);

		  pause();
		  sleep(pauseDuration*1000);
	}
	else
	{
		set_trans_mask(15);
		set_trans_mask(14);
		sleep(150);
		sleep(pauseDuration*1000);

	}

	if (measure_object)
	{
		    diffs = matrix(64, N);
		    bestMean1 = 1000;
		    bestMean2 = 1000;
		    bestMean3 = 1000;
		    bestMean4 = 1000;
		    bestMean5 = 1000;
		    bestMean6 = 1000;
		    bestMean7 = 1000;
		    bestMean8 = 1000;
			      
		    bestSignal1 = back1;
		    bestSignal2 = back2;
		    bestSignal3 = back3;
		    bestSignal4 = back4;
		    bestSignal5 = back5;
		    bestSignal6 = back6;
		    bestSignal7 = back7;
		    bestSignal8 = back8;
		    
		  for (ka = 0; ka < reps; ka = ka + 1)
		  {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);
			      
			      
			      ref1 = w2*lf(back1,4,6,-8);
			      ref2 = w2*lf(back2,4,6,-8);
			      ref3 = w2*lf(back3,4,6,-8);
			      ref4 = w2*lf(back4,4,6,-8);
			      ref5 = w2*lf(back5,4,6,-8);
			      ref6 = w2*lf(back6,4,6,-8);
			      ref7 = w2*lf(back7,4,6,-8);
			      ref8 = w2*lf(back8,4,6,-8);
			      
			      for (kaa = 0; kaa < reps; kaa = kaa + 1)
			      {
					dt = 0;
					
					base1 = get_matrix_row(mt, kaa*64 + 0);
					(dt)=difference2(base1,ref1);
					dt = -dt;
					ref1=push2(ref1,dt);
					meanVal = mean(ref1 - base1);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean1 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base2 = get_matrix_row(mt, kaa*64 + 2);
					(dt)=difference2(base2,ref2);
					dt = -dt;
					ref2=push2(ref2,dt);
					meanVal = mean(ref2 - base2);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean2 = meanVal;
						  bestSignal2 = ref2;
					}
					
					base3 = get_matrix_row(mt, kaa*64 + 4);
					(dt)=difference2(base3,ref3);
					dt = -dt;
					ref3=push2(ref3,dt);
					meanVal = mean(ref3 - base3);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean3 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base4 = get_matrix_row(mt, kaa*64 + 6);
					(dt)=difference2(base4,ref4);
					dt = -dt;
					ref4=push2(ref4,dt);
					meanVal = mean(ref4 - base4);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean4 = meanVal;
						  bestSignal4 = ref1;
					}
					
					base5 = get_matrix_row(mt, kaa*64 + 8);
					(dt)=difference2(base5,ref5);
					dt = -dt;
					ref5=push2(ref5,dt);
					meanVal = mean(ref5 - base5);
					if (abs(meanVal) < abs(bestMean5))
					{
						  bestMean5 = meanVal;
						  bestSignal5 = ref5;
					}
					
					base6 = get_matrix_row(mt, kaa*64 + 10);
					(dt)=difference2(base6,ref6);
					dt = -dt;
					ref6=push2(ref6,dt);
					meanVal = mean(ref6 - base6);
					if (abs(meanVal) < abs(bestMean6))
					{
						  bestMean6 = meanVal;
						  bestSignal6 = ref6;
					}
					
					base7 = get_matrix_row(mt, kaa*64 + 12);
					(dt)=difference2(base7,ref7);
					dt = -dt;
					ref7=push2(ref7,dt);
					meanVal = mean(ref7 - base7);
					if (abs(meanVal) < abs(bestMean7))
					{
						  bestMean7 = meanVal;
						  bestSignal7 = ref7;
					}
					
					base8 = get_matrix_row(mt, kaa*64 + 14);
					(dt)=difference2(base8,ref8);
					dt = -dt;
					ref8=push2(ref8,dt);
					meanVal = mean(ref8 - base8);
					if (abs(meanVal) < abs(bestMean8))
					{
						  bestMean8 = meanVal;
						  bestSignal8 = ref8;
					} 
			    }
		  }
		  
		    set_matrix_row(diffs,0,bestSignal1);
		    set_matrix_row(diffs,1,push(bestSignal1,-shiftp));
		    set_matrix_row(diffs,2,bestSignal2);
		    set_matrix_row(diffs,3,push(bestSignal2,-shiftp));
		    set_matrix_row(diffs,4,bestSignal3);
		    set_matrix_row(diffs,5,push(bestSignal3,-shiftp));
		    set_matrix_row(diffs,6,bestSignal4);
		    set_matrix_row(diffs,7,push(bestSignal4,-shiftp));
		    set_matrix_row(diffs,8,bestSignal5);
		    set_matrix_row(diffs,9,push(bestSignal5,-shiftp));
		    set_matrix_row(diffs,10,bestSignal6);
		    set_matrix_row(diffs,11,push(bestSignal6,-shiftp));
		    set_matrix_row(diffs,12,bestSignal7);
		    set_matrix_row(diffs,13,push(bestSignal7,-shiftp));
		    set_matrix_row(diffs,14,bestSignal8);
		    set_matrix_row(diffs,15,push(bestSignal8,-shiftp));
		  
		  set_trans_mask(15);
		  set_trans_mask(13);
		  sleep(150);
		  
		  bestMean1 = 1000;
		    bestMean2 = 1000;
		    bestMean3 = 1000;
		    bestMean4 = 1000;
		    bestMean5 = 1000;
		    bestMean6 = 1000;
		    bestMean7 = 1000;
		    bestMean8 = 1000;
			      
		    bestSignal1 = back1;
		    bestSignal2 = back2;
		    bestSignal3 = back3;
		    bestSignal4 = back4;
		    bestSignal5 = back5;
		    bestSignal6 = back6;
		    bestSignal7 = back7;
		    bestSignal8 = back8;
		    
		  for (ka = 0; ka < reps; ka = ka + 1)
		  {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);
			      
			      
			      ref1 = w2*lf(back1,4,6,-8);
			      ref2 = w2*lf(back2,4,6,-8);
			      ref3 = w2*lf(back3,4,6,-8);
			      ref4 = w2*lf(back4,4,6,-8);
			      ref5 = w2*lf(back5,4,6,-8);
			      ref6 = w2*lf(back6,4,6,-8);
			      ref7 = w2*lf(back7,4,6,-8);
			      ref8 = w2*lf(back8,4,6,-8);
			      
			      for (kaa = 0; kaa < reps; kaa = kaa + 1)
			      {
					dt = 0;
					
					base1 = get_matrix_row(mt, kaa*64 + 16);
					(dt)=difference2(base1,ref1);
					dt = -dt;
					ref1=push2(ref1,dt);
					meanVal = mean(ref1 - base1);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean1 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base2 = get_matrix_row(mt, kaa*64 + 18);
					(dt)=difference2(base2,ref2);
					dt = -dt;
					ref2=push2(ref2,dt);
					meanVal = mean(ref2 - base2);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean2 = meanVal;
						  bestSignal2 = ref2;
					}
					
					base3 = get_matrix_row(mt, kaa*64 + 20);
					(dt)=difference2(base3,ref3);
					dt = -dt;
					ref3=push2(ref3,dt);
					meanVal = mean(ref3 - base3);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean3 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base4 = get_matrix_row(mt, kaa*64 + 22);
					(dt)=difference2(base4,ref4);
					dt = -dt;
					ref4=push2(ref4,dt);
					meanVal = mean(ref4 - base4);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean4 = meanVal;
						  bestSignal4 = ref1;
					}
					
					base5 = get_matrix_row(mt, kaa*64 + 24);
					(dt)=difference2(base5,ref5);
					dt = -dt;
					ref5=push2(ref5,dt);
					meanVal = mean(ref5 - base5);
					if (abs(meanVal) < abs(bestMean5))
					{
						  bestMean5 = meanVal;
						  bestSignal5 = ref5;
					}
					
					base6 = get_matrix_row(mt, kaa*64 + 26);
					(dt)=difference2(base6,ref6);
					dt = -dt;
					ref6=push2(ref6,dt);
					meanVal = mean(ref6 - base6);
					if (abs(meanVal) < abs(bestMean6))
					{
						  bestMean6 = meanVal;
						  bestSignal6 = ref6;
					}
					
					base7 = get_matrix_row(mt, kaa*64 + 28);
					(dt)=difference2(base7,ref7);
					dt = -dt;
					ref7=push2(ref7,dt);
					meanVal = mean(ref7 - base7);
					if (abs(meanVal) < abs(bestMean7))
					{
						  bestMean7 = meanVal;
						  bestSignal7 = ref7;
					}
					
					base8 = get_matrix_row(mt, kaa*64 + 30);
					(dt)=difference2(base8,ref8);
					dt = -dt;
					ref8=push2(ref8,dt);
					meanVal = mean(ref8 - base8);
					if (abs(meanVal) < abs(bestMean8))
					{
						  bestMean8 = meanVal;
						  bestSignal8 = ref8;
					} 
			    }
		  }
		  
		    set_matrix_row(diffs,16,bestSignal1);
		    set_matrix_row(diffs,17,push(bestSignal1,-shiftp));
		    set_matrix_row(diffs,18,bestSignal2);
		    set_matrix_row(diffs,19,push(bestSignal2,-shiftp));
		    set_matrix_row(diffs,20,bestSignal3);
		    set_matrix_row(diffs,21,push(bestSignal3,-shiftp));
		    set_matrix_row(diffs,22,bestSignal4);
		    set_matrix_row(diffs,23,push(bestSignal4,-shiftp));
		    set_matrix_row(diffs,24,bestSignal5);
		    set_matrix_row(diffs,25,push(bestSignal5,-shiftp));
		    set_matrix_row(diffs,26,bestSignal6);
		    set_matrix_row(diffs,27,push(bestSignal6,-shiftp));
		    set_matrix_row(diffs,28,bestSignal7);
		    set_matrix_row(diffs,29,push(bestSignal7,-shiftp));
		    set_matrix_row(diffs,30,bestSignal8);
		    set_matrix_row(diffs,31,push(bestSignal8,-shiftp));

		  set_trans_mask(15);
		  set_trans_mask(11);
		  sleep(150);

		  bestMean1 = 1000;
		    bestMean2 = 1000;
		    bestMean3 = 1000;
		    bestMean4 = 1000;
		    bestMean5 = 1000;
		    bestMean6 = 1000;
		    bestMean7 = 1000;
		    bestMean8 = 1000;
			      
		    bestSignal1 = back1;
		    bestSignal2 = back2;
		    bestSignal3 = back3;
		    bestSignal4 = back4;
		    bestSignal5 = back5;
		    bestSignal6 = back6;
		    bestSignal7 = back7;
		    bestSignal8 = back8;
		    
		  for (ka = 0; ka < reps; ka = ka + 1)
		  {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);
			      
			      
			      ref1 = w2*lf(back1,4,6,-8);
			      ref2 = w2*lf(back2,4,6,-8);
			      ref3 = w2*lf(back3,4,6,-8);
			      ref4 = w2*lf(back4,4,6,-8);
			      ref5 = w2*lf(back5,4,6,-8);
			      ref6 = w2*lf(back6,4,6,-8);
			      ref7 = w2*lf(back7,4,6,-8);
			      ref8 = w2*lf(back8,4,6,-8);
			      
			      for (kaa = 0; kaa < reps; kaa = kaa + 1)
			      {
					dt = 0;
					
					base1 = get_matrix_row(mt, kaa*64 + 32);
					(dt)=difference2(base1,ref1);
					dt = -dt;
					ref1=push2(ref1,dt);
					meanVal = mean(ref1 - base1);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean1 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base2 = get_matrix_row(mt, kaa*64 + 34);
					(dt)=difference2(base2,ref2);
					dt = -dt;
					ref2=push2(ref2,dt);
					meanVal = mean(ref2 - base2);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean2 = meanVal;
						  bestSignal2 = ref2;
					}
					
					base3 = get_matrix_row(mt, kaa*64 + 36);
					(dt)=difference2(base3,ref3);
					dt = -dt;
					ref3=push2(ref3,dt);
					meanVal = mean(ref3 - base3);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean3 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base4 = get_matrix_row(mt, kaa*64 + 38);
					(dt)=difference2(base4,ref4);
					dt = -dt;
					ref4=push2(ref4,dt);
					meanVal = mean(ref4 - base4);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean4 = meanVal;
						  bestSignal4 = ref1;
					}
					
					base5 = get_matrix_row(mt, kaa*64 + 40);
					(dt)=difference2(base5,ref5);
					dt = -dt;
					ref5=push2(ref5,dt);
					meanVal = mean(ref5 - base5);
					if (abs(meanVal) < abs(bestMean5))
					{
						  bestMean5 = meanVal;
						  bestSignal5 = ref5;
					}
					
					base6 = get_matrix_row(mt, kaa*64 + 42);
					(dt)=difference2(base6,ref6);
					dt = -dt;
					ref6=push2(ref6,dt);
					meanVal = mean(ref6 - base6);
					if (abs(meanVal) < abs(bestMean6))
					{
						  bestMean6 = meanVal;
						  bestSignal6 = ref6;
					}
					
					base7 = get_matrix_row(mt, kaa*64 + 44);
					(dt)=difference2(base7,ref7);
					dt = -dt;
					ref7=push2(ref7,dt);
					meanVal = mean(ref7 - base7);
					if (abs(meanVal) < abs(bestMean7))
					{
						  bestMean7 = meanVal;
						  bestSignal7 = ref7;
					}
					
					base8 = get_matrix_row(mt, kaa*64 + 46);
					(dt)=difference2(base8,ref8);
					dt = -dt;
					ref8=push2(ref8,dt);
					meanVal = mean(ref8 - base8);
					if (abs(meanVal) < abs(bestMean8))
					{
						  bestMean8 = meanVal;
						  bestSignal8 = ref8;
					} 
			    }
		  }
		  
		    set_matrix_row(diffs,32,bestSignal1);
		    set_matrix_row(diffs,33,push(bestSignal1,-shiftp));
		    set_matrix_row(diffs,34,bestSignal2);
		    set_matrix_row(diffs,35,push(bestSignal2,-shiftp));
		    set_matrix_row(diffs,36,bestSignal3);
		    set_matrix_row(diffs,37,push(bestSignal3,-shiftp));
		    set_matrix_row(diffs,38,bestSignal4);
		    set_matrix_row(diffs,39,push(bestSignal4,-shiftp));
		    set_matrix_row(diffs,40,bestSignal5);
		    set_matrix_row(diffs,41,push(bestSignal5,-shiftp));
		    set_matrix_row(diffs,42,bestSignal6);
		    set_matrix_row(diffs,43,push(bestSignal6,-shiftp));
		    set_matrix_row(diffs,44,bestSignal7);
		    set_matrix_row(diffs,45,push(bestSignal7,-shiftp));
		    set_matrix_row(diffs,46,bestSignal8);
		    set_matrix_row(diffs,47,push(bestSignal8,-shiftp));

		  set_trans_mask(15);
		  set_trans_mask(7);
		  sleep(150);

		  bestMean1 = 1000;
		    bestMean2 = 1000;
		    bestMean3 = 1000;
		    bestMean4 = 1000;
		    bestMean5 = 1000;
		    bestMean6 = 1000;
		    bestMean7 = 1000;
		    bestMean8 = 1000;
			      
		    bestSignal1 = back1;
		    bestSignal2 = back2;
		    bestSignal3 = back3;
		    bestSignal4 = back4;
		    bestSignal5 = back5;
		    bestSignal6 = back6;
		    bestSignal7 = back7;
		    bestSignal8 = back8;
		    
		  for (ka = 0; ka < reps; ka = ka + 1)
		  {
			    acquire(1,back1, 2, back2, 3, back3,4,back4,5,back5, 6, back6, 7, back7,8,back8);
			      
			      
			      ref1 = w2*lf(back1,4,6,-8);
			      ref2 = w2*lf(back2,4,6,-8);
			      ref3 = w2*lf(back3,4,6,-8);
			      ref4 = w2*lf(back4,4,6,-8);
			      ref5 = w2*lf(back5,4,6,-8);
			      ref6 = w2*lf(back6,4,6,-8);
			      ref7 = w2*lf(back7,4,6,-8);
			      ref8 = w2*lf(back8,4,6,-8);
			      
			      for (kaa = 0; kaa < reps; kaa = kaa + 1)
			      {
					dt = 0;
					
					base1 = get_matrix_row(mt, kaa*64 + 48);
					(dt)=difference2(base1,ref1);
					dt = -dt;
					ref1=push2(ref1,dt);
					meanVal = mean(ref1 - base1);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean1 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base2 = get_matrix_row(mt, kaa*64 + 50);
					(dt)=difference2(base2,ref2);
					dt = -dt;
					ref2=push2(ref2,dt);
					meanVal = mean(ref2 - base2);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean2 = meanVal;
						  bestSignal2 = ref2;
					}
					
					base3 = get_matrix_row(mt, kaa*64 + 52);
					(dt)=difference2(base3,ref3);
					dt = -dt;
					ref3=push2(ref3,dt);
					meanVal = mean(ref3 - base3);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean3 = meanVal;
						  bestSignal1 = ref1;
					}
					
					base4 = get_matrix_row(mt, kaa*64 + 54);
					(dt)=difference2(base4,ref4);
					dt = -dt;
					ref4=push2(ref4,dt);
					meanVal = mean(ref4 - base4);
					if (abs(meanVal) < abs(bestMean1))
					{
						  bestMean4 = meanVal;
						  bestSignal4 = ref1;
					}
					
					base5 = get_matrix_row(mt, kaa*64 + 56);
					(dt)=difference2(base5,ref5);
					dt = -dt;
					ref5=push2(ref5,dt);
					meanVal = mean(ref5 - base5);
					if (abs(meanVal) < abs(bestMean5))
					{
						  bestMean5 = meanVal;
						  bestSignal5 = ref5;
					}
					
					base6 = get_matrix_row(mt, kaa*64 + 58);
					(dt)=difference2(base6,ref6);
					dt = -dt;
					ref6=push2(ref6,dt);
					meanVal = mean(ref6 - base6);
					if (abs(meanVal) < abs(bestMean6))
					{
						  bestMean6 = meanVal;
						  bestSignal6 = ref6;
					}
					
					base7 = get_matrix_row(mt, kaa*64 + 60);
					(dt)=difference2(base7,ref7);
					dt = -dt;
					ref7=push2(ref7,dt);
					meanVal = mean(ref7 - base7);
					if (abs(meanVal) < abs(bestMean7))
					{
						  bestMean7 = meanVal;
						  bestSignal7 = ref7;
					}
					
					base8 = get_matrix_row(mt, kaa*64 + 62);
					(dt)=difference2(base8,ref8);
					dt = -dt;
					ref8=push2(ref8,dt);
					meanVal = mean(ref8 - base8);
					if (abs(meanVal) < abs(bestMean8))
					{
						  bestMean8 = meanVal;
						  bestSignal8 = ref8;
					} 
			    }
		  }
		  
		    set_matrix_row(diffs,48,bestSignal1);
		    set_matrix_row(diffs,49,push(bestSignal1,-shiftp));
		    set_matrix_row(diffs,50,bestSignal2);
		    set_matrix_row(diffs,51,push(bestSignal2,-shiftp));
		    set_matrix_row(diffs,52,bestSignal3);
		    set_matrix_row(diffs,53,push(bestSignal3,-shiftp));
		    set_matrix_row(diffs,54,bestSignal4);
		    set_matrix_row(diffs,55,push(bestSignal4,-shiftp));
		    set_matrix_row(diffs,56,bestSignal5);
		    set_matrix_row(diffs,57,push(bestSignal5,-shiftp));
		    set_matrix_row(diffs,58,bestSignal6);
		    set_matrix_row(diffs,59,push(bestSignal6,-shiftp));
		    set_matrix_row(diffs,60,bestSignal7);
		    set_matrix_row(diffs,61,push(bestSignal7,-shiftp));
		    set_matrix_row(diffs,62,bestSignal8);
		    set_matrix_row(diffs,63,push(bestSignal8,-shiftp));


		for (ia = 0; ia < 64; ia = ia + 1)
		{
			sig_add(path,get_matrix_row(diffs, ia));
		}
	}

	for (ia = 0; ia < 64; ia = ia + 1)
	{
		set_matrix_row(mt,ia, SIG_READ(path,ia) - SIG_READ(background_path,ia));
	}

}
else
{
	r1=SIG_READ(path,0);
	W=WINDOW(r1);
	N=count(r1);
	mt = matrix(reps*num_of_steps*4,N);
	A=matrix(MaxY,MaxX);
	signals = matrix(64,N/2);
}


c = 300.0; 
 
dN = N/W; 
dNc = dN/c; 


tempSignal = signal(W/2, N/2, false);
if (corrected_delays)
{
	delays = signal(1,16,false);
	delays = SIG_READ("C:/data/delays.sig",0);
	r11 = delays;
	delays2 = signal(1,16,false);
	delays2 = SIG_READ("C:/data/delays_trans.sig",0);
	r12 = delays2;
	for (ka = 0; ka < 4; ka = ka + 1)
	{
		for (ia = 0; ia<num_of_steps; ia=ia+1)
		{	
			//tempRead =SIG_READ(path,ia + ka*16) - SIG_READ(background_path,ia + ka*16);
			tempRead =SIG_READ(path,ia + ka*16);
			insert(tempRead, 0, N/2-1, tempSignal, 0);
			tempsp = fft(tempSignal);
			tempsp[0] = 0;
			tempsp[1] = 0;
			tempsp[2] = 0;
			tempsp[3] = 0;
			tempSignal = ifft(tempsp);
			set_matrix_row(signals,ia + ka*16, 2*push(tempSignal,-delays[ia]-delays2[ka]));
			//set_matrix_row(signals,ia + ka*16, 2*lf(push(tempSignal,-delays[ia]-delays2[ka]),maxFreq,maxFreq*1.5,-6));

		}
	}
}
else
{
	for (ia = 0; ia<4*num_of_steps; ia=ia+1)
	{	
		    //tempRead = SIG_READ(path,ia) - SIG_READ(background_path,ia);
		    tempRead = SIG_READ(path,ia);
		    insert(tempRead, 0, N/2-1, tempSignal, 0);
		    tempsp = fft(tempSignal);
		    tempsp[0] = 0;
		    tempsp[1] = 0;
		    tempsp[2] = 0;
		    tempsp[3] = 0;
		    tempSignal = ifft(tempsp);
		    //set_matrix_row(signals,ia, 2*lf(tempSignal,maxFreq,maxFreq*1.5,-6));
		    set_matrix_row(signals,ia, 2*tempSignal);
	}
}


r1=get_matrix_row(signals,0 + 16*trans);
r2=get_matrix_row(signals,1+ 16*trans);
r3=get_matrix_row(signals,2+ 16*trans);
r4=get_matrix_row(signals,3+ 16*trans);
r5=get_matrix_row(signals,4+ 16*trans);
r6=get_matrix_row(signals,5+ 16*trans);
r7=get_matrix_row(signals,6+ 16*trans);
r8=get_matrix_row(signals,7+ 16*trans);
r9=get_matrix_row(signals,8+ 16*trans);
r10=get_matrix_row(signals,9+ 16*trans);



kirchhoff_migration(signals,A,positionx,positiony,transx,transy,W/2,object_step,range);
 
pos=0;
m=signal(1,MaxY,false);
m2=signal(1,MaxY,false);
for(k=0; k<MaxY;k=k+1)
{
	m[k]=max(get_matrix_row(A,k),pos);
	m2[k]=min(get_matrix_row(A,k),pos);
}
r15 = m;
mm=max(m,pos);
out(mm);
r16 = get_matrix_row(A,pos);
r16count = count(r16);
temp = signal(1, r16count, false);


for (ia = 0; ia < r16cont; ia = ia + 1)
{
	  temp[ia] = r16[ia];
}
r16 = temp;
bla = max(r16,pos);
x = -object_step*MaxX/2 + object_step*pos;
if (bla > threshold)
{
	  out(x);
}
mm = max(r16,pos);
for(k=0; k<MaxY;k=k+1)
{
	tempy = get_matrix_row(A,k);
	m[k]=tempy[pos];
}

mm = max(m,pos);

zdir = signal(1,MaxZ,false);
rsign = signal(1,MaxZ, false);


z = range -object_step*MaxZ/2 ;
y = object_step*MaxY/2 - object_step*pos;
if (bla > threshold)
{
	  out(y);
}

//zdir = range_search(x,y,MaxZ,signals, positionx, positiony, transx, transy, W/2,object_step,range);

//r14 = zdir;
r13 = rsign;



for(k=0; k<MaxY;k=k+1)
{
	for(i=0; i<MaxX;i=i+1)
	{
		x=get_matrix(A,k,i) ;
		x = x - threshold;
		if (x < 0)
		{
			x = 0;
		}
		set_matrix(A,k,i,x);

	}
}


draw(A);

draw_axis( -MaxX*object_step/2, object_step,MaxX/10, -MaxY*object_step/2, object_step, MaxY/10);
