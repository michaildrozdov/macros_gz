clear_variables();
//Initialization
bestMaximum = 0;
bestxx = 0;
bestyy = 0;
angleStep = 0;
atAngle = angleStart;//deg
startAngle = angleStart;//alias
endAngle = angleStart;//alias
showSignals = false;//update registers with current signals, if true
stationaryBackground = false;//one signal is used as background
calculateTargetSpace = true;//if false, only signals are acquired/loaded, but no other processing
meanCoef = 0.0;//how much of accumulated background is used in next frame, 0 - means current - prev
skipSize = 2;//how many points are skipped, while searching for targets in delay-angle space.
//Smaller number means finer search, but longer calculation. Minimum is 1 - each point will be checked

passSize = 4;//if there is gap of lower than threshold values between two regions of higher than threshold values,
//it is ignored and two regions are joined to one target, if gap is less than this parameter

arrayD = 12;//distance between centers of arrays
maxVel = 1.5;//m/s
deltaT = 2;//s expected duration between frames, will be updated
acquisitionOnly = false;//if true, processing not performed

thresholdValue = 200;//checked of power
pulseDuration = 2;//duration for integration, when calculating power from difference
falloffDuration = 0.5;//duration of falloff in integration window, when calculating power from difference
parametersNumber = 6;//how many first signals in file will be parameters
maxNumberOfMeasurements = 1000;//some number instead of infinite loop
d = 0.13;//distance between antenna elements
minDistance = rangestart;//rangeStart is given in params.mac
if (minDistance < 0)
{
	  minDistance = 0;
}
distStep = 0.1;
maxDistance = rangeend;

//init of image matrix (where argets are displayed)
imageSizeX = ceil((maxDistance - minDIstance)/distStep);
imageSizeY = ceil((arrayD+18)/distStep);
imageMatrix = matrix(imageSizeX, imageSizeY);
imageMatrix = 0;
//draw(imageMatrix);


c = 0.3;//m/ns
maxTheoreticalDelay = d/c + 0.1;
timeStart = 268 - arrayD/c;//ns, t0
timeStart = 286 - arrayD/c;//ns, t0, this is more apropriate based on results of actual measurements

coarseDel = 4*floor((timeStart + 2*sqrt(rangeStart*rangeStart + arrayD*arrayD/4)/c - 5)/4);
set_coarse_delay(coarseDel);

//time base set to difference in delays between near point in middle and far point in middle
timeBase = 2*sqrt(rangeEnd*rangeEnd + arrayD*arrayD/4)/c - 2*sqrt(rangeStart*rangeStart + arrayD*arrayD/4)/c + 10;
if (timeBase > 100)
{
	  timeBase = 100;
}
set_time_base(timeBase/10);

params1 = signal(1,1,false);
params2 = signal(1,1,false);
params3 = signal(1,1,false);
params4 = signal(1,1,false);
params5 = signal(1,1,false);
params6 = signal(1,1,false);
params1 = angleStart;
params2 = angleEnd;
params3 = angleStep;
params4 = 1;//not used
params5 = 1;//not used
params6 = coarseDel;
if (saveFile > 0)
{
	  sig_add(saveTo,params1);
	  sig_add(saveTo,params2);
	  sig_add(saveTo,params3);
	  sig_add(saveTo,params4);
	  sig_add(saveTo,params5);
	  sig_add(saveTo,params6);
	  sig_setlabel(saveTo,0,"start angle");
	  sig_setlabel(saveTo,1,"end angle");
	  sig_setlabel(saveTo,2,"angleStep");
	  sig_setlabel(saveTo,3,"distance at start of window");
	  sig_setlabel(saveTo,4,"three signals at angle");
	  sig_setlabel(saveTo,5,"coarse delay");
}

//angles = signal(1,maxNumberOfMeasurements,false);
//amplitudes = signal(1,maxNumberOfMeasurements,false);

antennaPos = signal(1,8,false);
antennaPos[0] = 7*d/2;
antennaPos[1] = 5*d/2;
antennaPos[2] = 3*d/2;
antennaPos[3] = d/2;
antennaPos[4] = -d/2;
antennaPos[5] = -3*d/2;
antennaPos[6] = -5*d/2;
antennaPos[7] = -7*d/2;


outAntennaPos = signal(1,4,false);
outAntennaPos[0] = -3*d/2;
outAntennaPos[1] = -d/2;
outAntennaPos[2] = d/2;
outAntennaPos[3] = 3*d/2;

lineDelays = signal(1,4,false);
if (atAngle > 0)
{
	  for (ia = 0; ia < 4; ia = ia + 1)
	  {
		    lineDelays[ia] = 1000*(outputDelays[ia] - ia*d*sin(atAngle*pi()/180)/c);
	  }
}
else
{
	  for (ia = 0; ia < 4; ia = ia + 1)
	  {
		    lineDelays[ia] = 1000*(outputDelays[ia] - (ia - 3)*d*sin(atAngle*pi()/180)/c);
	  }
}
pos = 0;

for (ia = 0; ia < 4; ia = ia + 1)
{
	  delay_line_set_time(ia + 1,lineDelays[ia]);
}

maxAngleDisplace = abs(startAngle);
if (abs(maxAngleDisplace) < abs(endAngle))
{
	  maxAngleDisplace = abs(endAngle);
}
	  
acquire(1,prev1);
N = count(prev1);
T = window(prev1);

//scaling registers
r2 = prev1;
r3 = prev1;
r4 = prev1;
r5 = prev1;
r6 = prev1;
r7 = prev1;
r8 = prev1;
r9 = prev1;
r10 = prev1;
r11 = prev1;
r12 = prev1;
r13 = prev1;
r14 = prev1;
r15 = prev1;
r16 = prev1;
r1 = prev1;
powersignal = matrix(8,N);//array to store power, calculated from difference signal
powerRaw = matrix(8,N);//array to store power, calculated from direct signal
powerWithThreshold = matrix(8,N);//if threshold is used for power, here power after applying threshold is stored
prevSignal = matrix(8,N);//previous signal
currentSignal = matrix(8,N);//current signal
differenceSignal = matrix(8,N);//difference between current and previous
angleSpaceStep = 5;//when building angle-delay space, what is angle step
anglesNum = 90/angleSpaceStep+1;//covering 90 degrees field of view with selected step
distanceAngleSpace = matrix(anglesNum,N/skipSize);//building matrix for angle-delay space, it is skipSize times less than number of points
stdevStep = 2*floor(N/skipSize/5/2);//when calculating variable threshold, it is calculated based on standard deviation of
//signal itself around given point, to avoid long calculations, it is calculated in regions, not in every point. So stdevStep is size of region for
//one calculation
thresholdValuesLocal = signal(1, N/skipSize, false);//array, which will be used to store variable (with point in signal) threshold
stddevLocalCalcArray = signal(1, stdevStep, false);//array to store region of power signal for quick mean and stdev calculation


//if maximum angle is wide enough, drawing area width is calculated directly from that angle
//otherwise additional width of maxDistance/3 is added to avoid drawing area as narrow strip
if (maxAngleDisplace > 10)
{
	  maxDisplace = maxDistance*sin(maxAngleDisplace*pi()/180);
}
else
{
	  maxDisplace = maxDistance*sin(maxAngleDisplace*pi()/180) + maxDistance/3;
}

longDifference = matrix(8,8*N);//8 times increased number of points for difference signal, used for zero padding
longSignal = signal(T,8*N,false);//signal, which has 8 times number of points in same time window, only used to give
//proper frequency scale to longSpectrumConst
longSpectrumConst = fft(longSignal);//long spectrum, used during zeropadding
longSpectrumConst = 0;

sp = fft(prev1);//normal length spectrum, used during zeropadding
divisionStep = (maxDistance + 20 - minDistance)/10;//entire area under test plus 20 meters (to avoid target moving out of the zone)
//devided into 10 to find size of one grid element in drawing


//to avoid strange numbers of division step (for example 2.5824 m), division step is rounded
if ((divisionStep > 0.5) and (divisionStep <= 1.4))
{
	  divisionStep = 1;
}
if ((divisionStep > 1.4) and (divisionStep <= 3))
{
	  divisionStep = 2;
}
if ((divisionStep > 3) and (divisionStep <= 6.5))
{
	  divisionStep = 5;
}
if ((divisionStep > 6.5) and (divisionStep <= 14))
{
	  divisionStep = 10;
}
if ((divisionStep > 14) and (divisionStep <= 50))
{
	  divisionStep = 20;
}

var = ceil((arrayD + 2.4*maxDisplace)/divisionStep)*divisionStep;
left = var - (arrayD + 2.4*maxDisplace);

antennasToDisplay = signal(1,12,false);
antennasToDisplay[0] = (var + left)/2 - arrayD/2;
antennasToDisplay[1] = (var + left)/2 - arrayD/2;
antennasToDisplay[2] = (var + left)/2 - arrayD/2;
antennasToDisplay[3] = (var + left)/2 - arrayD/2;
antennasToDisplay[4] = (var + left)/2 - arrayD/2;
antennasToDisplay[5] = (var + left)/2 - arrayD/2;
antennasToDisplay[6] = (var + left)/2 - arrayD/2;
antennasToDisplay[7] = (var + left)/2 - arrayD/2;
antennasToDisplay[8] = (var + left)/2 + arrayD/2;
antennasToDisplay[9] = (var + left)/2 + arrayD/2;
antennasToDisplay[10] = (var + left)/2 + arrayD/2;
antennasToDisplay[11] = (var + left)/2 + arrayD/2;
out(maxDisplace);

//xyinit(-maxDisplace*1.2,minDistance,maxDisplace*1.2+arrayD,maxDistance*1.2,antennasToDisplay,divisionStep,1);
xyinit(-(var + left)/2,minDistance,(var + left)/2,maxDistance,antennasToDisplay,divisionStep,1);

xyclear();

if (abs(startAngle - endAngle) > 0.01)
{
	  xyaddlines(arrayD,0,arrayD - (maxDistance + 20)*tan(startAngle*pi()/180), maxDistance+20,arrayD,0,arrayD - (maxDistance+20)*tan(endAngle*pi()/180), maxDistance+20);
}

pointsPerNs = N/T;
nsPerPoint = T/N;

slidingWindowN = ceil(pulseDuration*pointsPerNs);
slidingWindow = signal(pulseDuration, slidingWindowN, false);
meanSig = slidingWindow;

signalPart = signal(pulseDuration,slidingWindowN,false);

start1point = 0;
start2point = floor(falloffDuration*slidingWindowN/pulseDuration);
end1point = floor((pulseDuration - falloffDuration)*slidingWindowN/pulseDuration);
end2point = slidingWindowN-1;

slidingWindow = 0;
for (ia = start1point; ia < start2point; ia = ia + 1)
{
	  slidingWindow[ia] = (1 + sin(-pi()/2 + pi() *(ia - start1point)/(start2point - start1point)))/2;
}
for (ia = start2point; ia < end1point; ia = ia + 1)
{
	  slidingWindow[ia] = 1;
}
for (ia = end1point; ia < end2point; ia = ia + 1)
{
	  slidingWindow[ia] = (1 + sin(pi()/2 + pi() *(ia - end1point)/(end2point - end1point)))/2;
}

detected = 0;
sinceDetected = 20;

disp = parametersNumber;
prevAngle = 0;
meanSignal = matrix(8,N);

constSignal = prev1;
constSignal = 0;
for (ia = 0; ia < 8; ia = ia + 1)
{
	  set_matrix_row(meanSignal, ia, constSignal);
}

counter = 1;

thresholds = signal(1,8,false);
firstOccurance = signal(1,8,false);
lastOccurance = signal(1,8,false);
hadMaximum = signal(1,8,false);

weights = matrix(8,8);
delays = matrix(8,8);
weights = 0;
prevDistance = 0;
prevAngle = 0;


n1=floor(N/20);//10% from start
n2=N-floor(N/20);//90% from start


//windowing function start  
w=prev1;
w=1;//fill with ones


//fill first 10% with rising sinusoid
for(i=0;i<n1;i=i+1)
{
	  w[i]=sqr(sqr(sin(i/n1*pi()/2)));
}

//fill last 10% with rising sinusoid
upper = N - n2;
//index = 0;
for(i=0;i< upper;i=i+1)
{
	  index = n2 + i;
	  w[index]=sqr(sqr(sin(pi()*(upper - i)/(upper)/2)));
}
//windowing function end

targetsUsedDelay = signal(1,300, false);
targetsUsedAngle = signal(1,300, false);
targetsUsedMaximum = signal(1,300, false);
targetsUsedDispersion = signal(1,300, false);
// End of Initialization

xes = signal(1,1000,false);
yes = signal(1,1000,false);
xes = 0;
yes = 0;
currentFrame = 0;
//Main loop
for (ind1 = 0; ind1 < maxNumberOfMeasurements; ind1 = ind1 + 1)
{
	  before = time();
	  //if window is shifted (coarse delay changed), leave mark in file as empty signal
	  curCoarseDel = get_coarse_delay();
	  if (curCoarseDel != coarseDel)
	  {
		    counter = 1;
		    emptySignal = curCoarseDel;
		    sig_add(saveTo,emptySignal);
	  }
	  
	  //Signal acquisition
	  if (atAngle > 0)
	  {
		    for (ia = 0; ia < 4; ia = ia + 1)
		    {
			      lineDelays[ia] = 1000*(outputDelays[ia] - ia*d*sin(atAngle*pi()/180)/c);
		    }
	  }
	  else
	  {
		    for (ia = 0; ia < 4; ia = ia + 1)
		    {
			      lineDelays[ia] = 1000*(outputDelays[ia] - (ia - 3)*d*sin(atAngle*pi()/180)/c);
		    }
	  }
	  pos = 0;


	  for (ia = 0; ia < 4; ia = ia + 1)
	  {
		    delay_line_set_time(ia + 1,lineDelays[ia]);
	  }


	  acquire(1,sig1,2,sig2,3,sig3,4,sig4,5,sig5,6,sig6,7,sig7,8,sig8);
	  if (saveFile > 0)
	  {
		    sig_add(saveTo,sig1);
		    sig_add(saveTo,sig2);
		    sig_add(saveTo,sig3);
		    sig_add(saveTo,sig4);
		    sig_add(saveTo,sig5);
		    sig_add(saveTo,sig6);
		    sig_add(saveTo,sig7);
		    sig_add(saveTo,sig8);
	  }
	  
	  if (acquisitionOnly)
	  {
			sleep(200);//small delay to accumulate difference (due to movement) between frames
			goto next;
	  }
	  
	  if (ind1 == 0)//first frame, only prev is saved
	  {
			set_matrix_row(prevSignal, 0, sig1);
			set_matrix_row(prevSignal, 1, sig2);
			set_matrix_row(prevSignal, 2, sig3);
			set_matrix_row(prevSignal, 3, sig4);
			set_matrix_row(prevSignal, 4, sig5);
			set_matrix_row(prevSignal, 5, sig6);
			set_matrix_row(prevSignal, 6, sig7);
			set_matrix_row(prevSignal, 7, sig8);
			
			set_matrix_row(meanSignal, 0, sig1);
			set_matrix_row(meanSignal, 1, sig2);
			set_matrix_row(meanSignal, 2, sig3);
			set_matrix_row(meanSignal, 3, sig4);
			set_matrix_row(meanSignal, 4, sig5);
			set_matrix_row(meanSignal, 5, sig6);
			set_matrix_row(meanSignal, 6, sig7);
			set_matrix_row(meanSignal, 7, sig8);
			goto next;
	  }
	  
	  set_matrix_row(currentSignal, 0, sig1);
	  set_matrix_row(currentSignal, 1, sig2);
	  set_matrix_row(currentSignal, 2, sig3);
	  set_matrix_row(currentSignal, 3, sig4);
	  set_matrix_row(currentSignal, 4, sig5);
	  set_matrix_row(currentSignal, 5, sig6);
	  set_matrix_row(currentSignal, 6, sig7);
	  set_matrix_row(currentSignal, 7, sig8);
	  
	  for (ka = 0; ka < 8; ka = ka + 1)
	  {
			set_matrix_row(meanSignal, ka, (1 - meanCoef)*get_matrix_row(prevSignal,ka) + meanCoef*get_matrix_row(meanSignal,ka));
	  }


	  //End of Signal acquisition
	  
	  //Difference signal calculation
	  ffilt1 = 4;//GHz
	  ffilt2 = 4.5;//GHz
	  for (point = 0; point < N - slidingWindowN; point = point + 1)
	  {
	    
		    for (ka = 0; ka < 8; ka = ka + 1)
		    {
			      tempNormal = get_matrix_row(currentSignal, ka)/1000;
			      insert(tempNormal,point,point + slidingWindowN - 1, signalPart,0);
			      signalPart = signalPart*slidingWindow;
			      meanVal = mean(signalPart);
			      meanSig = meanVal;
			      set_matrix(powerRaw, ka, point, sum((signalPart - meanSig)*(signalPart - meanSig)));
		    }
	  }
	  
	  for (ka = 0; ka < 8; ka = ka + 1)
	  {
		    cur = get_matrix_row(currentSignal,ka);
		    mea = get_matrix_row(meanSignal,ka);
		    set_label(cur,T,"nS","mV");
		    set_label(mea,T,"nS","mV");
		    curPower = get_matrix_row(powerRaw,ka);
		    set_matrix_row(differenceSignal, ka,lf(cur - mea,ffilt1,ffilt2,-6)/(push(curPower,slidingWindowN/2) + 0.5));
		    tempNormal = get_matrix_row(differenceSignal, ka);
		    set_label(tempNormal,T,"nS","mV");

		    sp = fft(tempNormal);
		    longSpectrumConst = 0;
		    insert(sp,0,N/2-2,longSpectrumConst,0);
		    
		    set_matrix_row(longDifference, ka, ifft(longSpectrumConst));
	  }
	  //End of Difference signal calculation


	  //Power calculation
	  sigPower = tempNormal;
	  sigPower = 0;
	  for (point = 0; point < N - slidingWindowN; point = point + 1)
	  {
		    for (ka = 0; ka < 8; ka = ka + 1)
		    {
			      tempNormal = get_matrix_row(differenceSignal, ka);
			      insert(tempNormal,point,point + slidingWindowN - 1, signalPart,0);
			      signalPart = signalPart*slidingWindow;
			      meanVal = mean(signalPart);
			      meanSig = meanVal;
			      valueToSet = sum((signalPart - meanSig)*(signalPart - meanSig));
			      if (valueToSet < 0)
			      {
					valueToSet = 0;
			      }
			      set_matrix(powersignal, ka, point, valueToSet);
		    }
	  }

	  //End of Power calculation
	    
	  pos = 0;

	  if (showSignals)
	  {
			  r1 = get_matrix_row(currentSignal, 0) - get_matrix_row(prevSignal, 0);
			  r2 = get_matrix_row(currentSignal, 1) - get_matrix_row(prevSignal, 1);
			  r3 = get_matrix_row(currentSignal, 2) - get_matrix_row(prevSignal, 2);
			  r4 = get_matrix_row(currentSignal, 3) - get_matrix_row(prevSignal, 3);
			  r5 = get_matrix_row(currentSignal, 4) - get_matrix_row(prevSignal, 4);
			  r6 = get_matrix_row(currentSignal, 5) - get_matrix_row(prevSignal, 5);
			  r7 = get_matrix_row(currentSignal, 6) - get_matrix_row(prevSignal, 6);
			  r8 = get_matrix_row(currentSignal, 7) - get_matrix_row(prevSignal, 7);
			  
			  r9 = get_matrix_row(powersignal, 0)/100;
			  r10 = get_matrix_row(powersignal, 1)/100;
			  r11 = get_matrix_row(powersignal, 2)/100;
			  r12 = get_matrix_row(powersignal, 3)/100;
			  r13 = get_matrix_row(powersignal, 4)/100;
			  r14 = get_matrix_row(powersignal, 5)/100;
			  r15 = get_matrix_row(powersignal, 6)/100;
			  r16 = get_matrix_row(powersignal, 7)/100;
	  }

	  for (ka = 0; ka < 8; ka = ka + 1)
	  {
			set_matrix_row(prevSignal, ka, get_matrix_row(currentSignal,ka));
	  }

	  time_mark1 = time()-before;
	  out(time_mark1);
	  imageMatrix = 0;
	  distanceAngleSpace = 0;
	  targetsFound = 0;
	  ////print_line("calculateTargetSpace ", calculateTargetSpace);
	  if (calculateTargetSpace)
	  {
		    pos = 0;
			      
		    for (ka = 0; ka < 8; ka = ka + 1)
		    {
			      meanVal = mean(get_matrix_row(powersignal,ka));
			      maxVal = max(get_matrix_row(powersignal,ka), pos);
			      thresholds[ka] = (maxVal - meanVal)/2;
			      firstOccurance[ka] = -1;
			      lastOccurance[ka] = -1;
			      hadMaximum[ka] = 0;
		    }

		    //Threshold on power (if needed)
		    currentThreshold = 0;
		    if (currentThreshold > 0)
		    {
			      for (ka = 0; ka < 8; ka = ka + 1)
			      {
					tempNormal = get_matrix_row(powersignal, ka);
					thresholdValueLocal = currentThreshold*max(tempNormal, pos);
					for (ia = 0; ia < N; ia = ia + 1)
					{
						  if (tempNormal[ia]  > thresholdValueLocal)
						  {
							    tempNormal[ia] = tempNormal[ia] - thresholdValueLocal;
						  }
						  else
						  {
							    tempNormal[ia] = 0;
						  }
					}

					set_matrix_row(powerWithThreshold, ka, tempNormal);
			      }
		    }
		    else
		    {
			      for (ka = 0; ka < 8; ka = ka + 1)
			      {
					tempNormal = get_matrix_row(powersignal, ka);
					set_matrix_row(powerWithThreshold, ka, tempNormal);
			      }
		    }
		    //End of Threshold on power (if needed)
		    tempSig = get_matrix_row(powerWithThreshold, 0)/100;
		    set_label(tempSig,T,"nS","mV");
		    r1 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 1)/100;
		    set_label(tempSig,T,"nS","mV");
		    r2 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 2)/100;
		    set_label(tempSig,T,"nS","mV");
		    r3 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 3)/100;
		    set_label(tempSig,T,"nS","mV");
		    r4 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 4)/100;
		    set_label(tempSig,T,"nS","mV");
		    r5 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 5)/100;
		    set_label(tempSig,T,"nS","mV");
		    r6 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 6)/100;
		    set_label(tempSig,T,"nS","mV");
		    r7 = tempSig;
		    tempSig = get_matrix_row(powerWithThreshold, 7)/100;
		    set_label(tempSig,T,"nS","mV");
		    r8 = tempSig;
		    
		    //Finding fronts and zero padding
		    for (ka = 0; ka < 8; ka = ka + 1)
		    {
			      tempNormal = get_matrix_row(powerWithThreshold, ka);
					
			      maxValue = max(tempNormal, pos);
			      set_label(tempNormal,T,"nS","mV");
		    
			      //////print_line("max value ", maxValue);
			      tempNormal = differ(tempNormal);//to find steepest front
			      for (la = 0; la < N; la = la + 1)
			      {
					if (tempNormal[la] < 0)
					{
						  tempNormal[la] = 0;
					}
			      }
			      sp = fft(tempNormal);
			      longSpectrumConst = 0;
			      insert(sp,0,N/2-2,longSpectrumConst,0);//zero padding
							      
			      set_matrix_row(longDifference, ka, ifft(longSpectrumConst));	
		    }
		    //Finding fronts and zero padding

		    //r9 = get_matrix_row(longDifference, 0)/10;
		    //r10 = get_matrix_row(longDifference, 1)/10;
		    //r11 = get_matrix_row(longDifference, 2)/10;
		    //r12 = get_matrix_row(longDifference, 3)/10;
		    //r13 = get_matrix_row(longDifference, 4)/10;
		    //r14 = get_matrix_row(longDifference, 5)/10;
		    //r15 = get_matrix_row(longDifference, 6)/10;
		    //r16 = get_matrix_row(longDifference, 7)/10;

		    //thresholdValue = 0.05*max(get_matrix_row(longDifference, 3), pos);
		    //print_line("Signals displayed");
		    
		    
		    //Building delay-angle space
		    //thresholdValue = 1000;

		    for (distance = 0; distance < N; distance = distance + skipSize)
		    {
			      
			      pointInSignal = distance*8;
			      testSig = get_matrix_row(longDifference, 3);
			      set_label(testSig,T,"nS","mV");

			      thresholdReached = false;
			      for (passInd = 0; passInd < passSize*8; passInd = passInd + 1)
			      {
					tempIndex = pointInSignal + passInd;
					if (tempIndex >= N*8)
					{
						goto can_calc;  
					}
					if (testSig[tempIndex] > thresholdValue)
					{
						  thresholdReached = true;
						  goto can_calc;
					}
			      }
			      
			      can_calc:
			      
			      if (thresholdReached)
			      {
					//////print_line("thresholdValue ", thresholdValue, " on distance ", distance);
					//////print_line("pointInSignal ", pointInSignal);
					for (angle = 0; angle < anglesNum; angle = angle + 1)
					{
						  //////print_line("angle ", angle);
						  delayPerAntenna = d/c*N/T*8*sin((angle*angleSpaceStep-45)*pi()/180);
						  summation = 0;
						  
						  for (ka = 0; ka < 8; ka = ka + 1)
						  {
							    displace = (ka-3)*delayPerAntenna;
							    index = floor(pointInSignal + displace);
							    if ((index >= 0) and (index < N*8))
							    {
								      tempLong = get_matrix_row(longDifference, ka);
								      summation = summation + tempLong[index]/10;
							    }
						  }
						  set_matrix(distanceAngleSpace, angle, distance/skipSize, get_matrix(distanceAngleSpace, angle, distance/skipSize) + summation);
					}
			      }

		    }
		    //print_line("Distance/angle space built");
		    //End Building delay-angle space
		    
		    //Building threshold array
		    testArray = get_matrix_row(distanceAngleSpace, (anglesNum-1)/2);
		    set_label(testArray,T,"nS","mV");
		    r16 = testArray;
		    maximumValue = max(testArray, pos);

		    thresholdValuesLocal = thresholdValue;

		    for (ind11 = 0; ind11 < N/skipSize-stdevStep/2; ind11 = ind11 + 1)
		    {
			      //////print_line("Current index ", ind11);
			      if (ind11 < stdevStep/2)
			      {
					insert(testArray, 0, stdevStep - 1, stddevLocalCalcArray, 0);
					stddevLocalCalcArray = 2*stddevLocalCalcArray*(ind11 + 1)/stdevStep;
			      }
			      else
			      {
					insert(testArray, ind11-stdevStep/2, ind11 + stdevStep/2 - 1, stddevLocalCalcArray, 0);
			      }
			      value = stdev(stddevLocalCalcArray);
			      meanValue = mean(stddevLocalCalcArray);
			      //print_line("st deviation ", value, " mean value ", meanValue);

			      thresholdValuesLocal[ind11] = meanValue + 2*value;
			      if (thresholdValuesLocal[ind11] > 30*thresholdValue)
			      {
					thresholdValuesLocal[ind11] = 30*thresholdValue;
			      }
			      else
			      {
					if (thresholdValuesLocal[ind11] < thresholdValue)
					{
						  thresholdValuesLocal[ind11] = thresholdValue;
					}
			      }
		    }
		    //print_line("Signals displayed");
		    r15 = thresholdValuesLocal;
		    
		    //End of Building threshold array

		    thresholdValue2 = mean(testArray) + 2*stdev(testArray);
		    ////print_line("Current threshold value ", thresholdValue);
		    sigForMean = testArray;
		    
		    //Searching for targets and localizing in delay-angle space
		    
		    for (ind11 = 0; ind11 < N; ind11 = ind11 + skipSize)
		    {
			      //print_line("ind11", ind11);
			      probeIndex = ind11/skipSize;
			      if (testArray[probeIndex] > thresholdValuesLocal[probeIndex])
			      {
					for (ind2 = ind11 + skipSize; ind2 < N; ind2 = ind2 + skipSize)
					{
						  probeIndex2 = ind2/skipSize;
						  if (testArray[probeIndex2] < thresholdValuesLocal[probeIndex2])
						  {
							    if (ind2 >= ind11 + 3*skipSize)//wide enough
							    {
								      //calculation of center of mass
								      totalWeight = 0;
								      totalDist = 0;
								      totalAngle = 0;
								      totalDisp = 0;
								      totalDispWeight = 0;
								      absoluteMax = 0;
								      meanVal = 0;
								      
								      for (angle = 0; angle < anglesNum; angle = angle + 1)
								      {
										tempSig = get_matrix_row(distanceAngleSpace, angle)/thresholdValue2;
										//r15 = tempSig;
										sigForMean = 0;
										insert(tempSig, ind11/skipSize, ind2/skipSize, sigForMean, 0);
										//meanVal = meanVal + mean(sigForMean)*N/(ind2 - ind11 + 1);
										meanVal = meanVal + mean(sigForMean);
										localMax = max(sigForMean, pos);
										if (localMax > absoluteMax)
										{
											  absoluteMax = localMax;
										}
								      }
								      meanVal = meanVal/anglesNum;
								      ////print_line("mean value ", meanVal, ", maximum value ", absoluteMax);
								      ////print_line("");
								      
								      for (angle = 0; angle < anglesNum; angle = angle + 1)
								      {
										tempSig = get_matrix_row(distanceAngleSpace, angle)/thresholdValue2;
										//r15 = tempSig;
										//sigForMean = 0;
										//insert(tempSig, ind11/skipSize, ind2/skipSize, sigForMean, 0);
										
										for (ind3 = ind11; ind3 <= ind2; ind3 = ind3+skipSize)
										{
											  probeIndex3 = ind3/skipSize;
											  totalDisp = totalDisp + 100*(meanVal - tempSig[probeIndex3])*(meanVal - tempSig[probeIndex3]);
											  //totalDispWeight = totalDispWeight +tempSig[ind3/skipSize];
											  totalDispWeight = totalDispWeight + 1;
											  if(tempSig[probeIndex3] > 0.7*absoluteMax)
											  { 
												   totalDist = totalDist + ind3*(tempSig[probeIndex3] - 0.7*absoluteMax);
												    totalAngle = totalAngle + angle*(tempSig[probeIndex3] - 0.7*absoluteMax);
												    totalWeight = totalWeight+(tempSig[probeIndex3] - 0.7*absoluteMax);
												    
											  }
										}
								      }
								      
								      width = ind2 - ind11;
								      //////print_line("target calculated from width ", width, " total weight ", totalWeight);
								      targetsUsedDelay[targetsFound] = totalDist/totalWeight;
								      targetsUsedAngle[targetsFound] = totalAngle/totalWeight*angleSpaceStep-50;
								      targetsUsedMaximum[targetsFound] = absoluteMax;
								      targetsUsedDispersion[targetsFound] = totalDisp/anglesNum*skipSize/(ind2 - ind11 + 1);
								      if (targetsUsedDispersion[targetsFound] > 20*targetsUsedMaximum[targetsFound])
								      {
										//only increase target count, if it is not some near constant blob
										targetsFound = targetsFound + 1;
								      }
								      else
								      {
										localDisp = totalDisp/totalDispWeight/anglesNum*skipSize/(ind2 - ind11 + 1);
										////print_line("failed to add target with dispersion of ", localDisp, " and maximum of ", absoluteMax, " at index ", ind11);
								      }
								      ind11 = ind2 + skipSize;
								      goto ne;
							    }
							    else
							    {
								    ind11 = ind2 + skipSize;
								      goto ne;  
							    }
						  }
					}
			      }
			      
			      ne:
		    }
		    
		    ////print_line("Targets calculated");
		    //End of Searching for targets and localizing in delay-angle space
		    bestMaximum = 0;
		    bestxx = 0;
		    bestyy = 0;
		    for (ia = 0; ia < targetsFound; ia = ia + 1)
		    {
			      curDelay = targetsUsedDelay[ia];
			      curAngle = targetsUsedAngle[ia];
			      curMax = targetsUsedMaximum[ia];
			      curDispersion = targetsUsedDispersion[ia];
			      
			      if (curDispersion > 1000)
			      {
					curDispersion = 1000;
			      }
			      ////print_line("Target found with distance ", curDelay, ", angle ", curAngle, ", maximum ", curMax, " and dispersion ", curDispersion);
			      
			      
			      //calculation of coordinates from angle and total path from transmitter to target to receiver
			      //let C be base of radar (arrayD)
			      //let A be distance from receiving array to target
			      //let B be distance from transmitting array to target
			      //let alpha be angle between A and C
			      //total path r is known, also:
			      //r = A + B;
			      //from theorem of cosine:
			      //B^2 = A^2 + C^2 - 2ACcos(alpha)
			      //B = r - A;
			      //r^2 - 2rA + A^2 = A^2 + C^2 - 2ACcos(alpha)
			      //2A(Ccos(alpha) - r)= C^2 - r^2;
			      //A = (C^2-r^2)/(2(Ccos(alpha) - r));
			      
			      r = (curDelay*T/N + coarseDel - timeStart)*c;
			      AA = (arrayD*arrayD - r*r)/(2*(arrayD*cos((90-curAngle)*pi()/180) - r));
			      x = AA*cos((90-curAngle)*pi()/180);
			      y = AA*sin((90-curAngle)*pi()/180);
			      ////print_line("Coordinates are: x ", x, ", y ", y);
			      
			      //if (curMax*curDispersion > bestMaximum)
			      if (curDispersion > bestMaximum)
			      {
					//bestMaximum = curMax*curDispersion;
					bestMaximum = curDispersion;
					bestxx = x;
					bestyy = y;
			      }

			      //xyplot(x-arrayD/2,y);
			      xIndex = imageSizeX - floor((y-minDistance)/(maxDistance - minDistance)*imageSizeX);//yes, it is stored to x
			      yIndex = floor((x+9)/(arrayD+18)*imageSizeY);
			      
			      effectiveSize = floor(4000/curDispersion + 1)*0.1/distStep;//limit of maximum size of target, to save processing time
			      if (effectiveSize > imageSizeX/2)
			      {
					effectiveSize = floor(imageSizeX/2);
			      }
			      ////print_line("Effective size of target ", ia, " is ", effectiveSize);

			      //filling image matrix region with target
			      for (xInd = -effectiveSize; xInd < effectiveSize; xInd = xInd + 1)
			      {
					for (yInd = -effectiveSize; yInd < effectiveSize; yInd = yInd + 1)
					{
						  if ((xIndex+xInd >= 0) and (xIndex+xInd < imageSizeX) and (yIndex+yInd >= 0) and (yIndex+yInd < imageSizeY))
						  {
							     if (get_matrix(imageMatrix, xIndex+xInd, yIndex+yInd) < (exp(-(xInd*xInd + yInd*yInd)*((curDispersion + 30)/10000)))*curMax)
							    {
								      set_matrix(imageMatrix, xIndex+xInd, yIndex+yInd, (exp(-(xInd*xInd + yInd*yInd)*((curDispersion + 30)/10000)))*curMax);
							    } 
						  }
					}
			      }
			      
			      
			      
			      
		    }
		    
		    xes[currentFrame] = bestxx;
		    yes[currentFrame] = bestyy;
		    if ((bestxx != 0) or (bestyy != 0))
		    {
			      xyplot(bestxx-arrayD/2,bestyy);
		    }
		    currentFrame = currentFrame + 1;
		    set_matrix(imageMatrix,0,0,3);
		    ////print_line("");
		    ////print_line("");
		    
		    continue2:

	  }
		    
	  //draw(distanceAngleSpace);
	  draw(imageMatrix);

	  
	  time_mark2 = time()-before;
	  out(time_mark2);
	  
	  //pause();
	  
	  next:
}

r15 = xes;
r16 = yes;

//End of Main loop
