// This subprogram finds the left and right maximas so that total count of maximas
// would be equal to 'maximas'. Absolute maxima must lie between the output positions.
// Absolute maxima must lie between the output positions. The search area of sig signal
// starting from search_start (relative position 0.0-1.0) and finishing at search_end
// (relative position 0.0-1.0). Pass search_start=0.0 and search_end=1.0 to look in the
// entire signal.
// Subprogram outputs positions of two maximas in pos1, pos2 (pos1 < pos2).
// Depending on the method pos1 and pos2 are either of equal distance from the
// absolute maxima ('method' == 1) or contain largest possible maximas ('method' == 2).
(error) = gate_maximas(sig, search_start, search_end, pos1, pos2, maximas, method)
{
	  error = 0;
	  pos1 = 0;
	  pos2 = 0;
	  maximas_found = 0;
	  
	  if (search_start >= 0.0 and search_end >= 0.0 and search_end <= 1.0 and search_end > search_start)
	  {
		    n = count(sig);
		    start_n = floor(n * search_start);
		    end_n = floor(n * search_end);
		    
		    sub_n = end_n - start_n + 1;
		    
		    subsignal = signal(10, sub_n, false); // Window is not important
		    insert(sig, start_n, end_n, subsignal, 0);
		    maxpos = 0;
		    maxval = max(subsignal, maxpos);
		    pos1 = start_n + maxpos;
		    pos2 = pos1;
		    
		    // Common errors
		    if (maxval < 0)
		    {
			      error = 2; // Unexpected signal shape
			      goto finish;
		    }
		    if ((maxpos > sub_n - 2) or (maxpos < 2))
		    {
			     error = 3; // To close to the edge
			     goto finish; 
		    }
		    
		    maximas_found = 1;
		    maxpos_left = maxpos;
		    maxpos_right = maxpos;
		    
		    while(maximas_found < maximas)
		    {
			      left_start = maxpos_left;
			      right_start = maxpos_right;
			      
			      //print_line("Starting scan to the left from ", left_start, " and scan to the right from ", right_start);
			      
			      // Find next maximum to the left. Sampling 5 points. This may fail if the signal is noisy.
			      passed_negative_left = false;
			      maxval_left = 0.0;
			      for (ia = left_start; ia > 1; ia = ia - 1)
			      {
					if (subsignal[ia] < 0)
					{
						  passed_negative_left = true;
					}
					
					sample4 = subsignal[ia + 2];
					sample3 = subsignal[ia + 1];
					sample2 = subsignal[ia];
					sample1 = subsignal[ia - 1];
					sample0 = subsignal[ia - 2];
					
					if (passed_negative_left and sample4 <= sample3 and sample3 <= sample2 and sample2 >= sample1 and sample1 >= sample0)
					{
						  maxpos_left = ia;
						  maxval_left = sample2;
						  goto break_early_one;
					}
			      }
break_early_one:

			      // Find next maximum to the right. Sampling 5 points. This may fail if the signal is noisy.
			      passed_negative_right = false;
			      maxval_right = 0.0;
			      for (ia = right_start; ia < sub_n - 2; ia = ia + 1)
			      {
					if (subsignal[ia] < 0)
					{
						  passed_negative_right = true;
					}
					
					sample4 = subsignal[ia + 2];
					sample3 = subsignal[ia + 1];
					sample2 = subsignal[ia];
					sample1 = subsignal[ia - 1];
					sample0 = subsignal[ia - 2];
					
					if (passed_negative_right and sample4 <= sample3 and sample3 <= sample2 and sample2 >= sample1 and sample1 >= sample0)
					{
						  maxpos_right = ia;
						  maxval_right = sample2;
						  goto break_early_two;
					}
			      }
break_early_two:
			      //print_line("New maximas found at ", maxpos_left, " and ", maxpos_right, ". Before adding have ", maximas_found, " total maximums.");
			      if (passed_negative_left and maxval_left > maxval_right)
			      {
					pos1 = start_n + maxpos_left;
					maximas_found = maximas_found + 1;
					
					if (maximas_found < maximas and method == 1)
					{
						  //print_line("Currently at ", maximas_found, " maximas. Will add the other one (r).");
						  // Can also add the smaller one and continue
						  pos2 = start_n + maxpos_right;
						  maximas_found = maximas_found + 1;
					}
					else
					{
						  //print_line("Method 2 is used, so the right maxima is not used.");
						  maxpos_right = right_start;
					}
					
					goto next;
			      }
			      
			      if (passed_negative_right and maxval_left < maxval_right)
			      {
					pos2 = start_n + maxpos_right;
					maximas_found = maximas_found + 1;
					
					if (maximas_found < maximas and method == 1)
					{
						  //print_line("Currently at ", maximas_found, " maximas. Will add the other one (l).");
						  // Can also add the smaller one and continue
						  pos1 = start_n + maxpos_left;
						  maximas_found = maximas_found + 1;
					}
					else
					{
						  //print_line("Method 2 is used, so the left maxima is not used.");
						  maxpos_left = left_start;
					}
					
					goto next;
			      }
			      
			      error = 4; // Unexpected error
			      goto finish;

next:
		    }
	  }
	  else
	  {
		    error = 1;
		    goto finish;
	  }
finish:
	  
}