//state defined as
//x, vx, y, vy
//state covariance matrix P is 4x4 matrix
//Q is diagonal 4x4 process noise matrix
Q11 = 0.5;
Q22 = 0.5;
Q33 = 0.5;
Q44 = 0.5;

Q = matrix(4,4);
Q = 0;
set_matrix(Q, 0, 0, 0.5);
set_matrix(Q, 1, 1, 0.5);
set_matrix(Q, 2, 2, 0.5);
set_matrix(Q, 3, 3, 0.5);

//R is diagonal 2x2 measurement noise matrix
R = matrix(2,2);
R = 0;
set_matrix(R, 0, 0, 1);
set_matrix(R, 1, 1, 1);

Rr11 = 1;
Rr12 = 0;
Rr21 = 0;
Rr22 = 1;

Rr = matrix(2,2);
set_matrix(Rr, 0, 0, 1);
set_matrix(Rr, 0, 1, 0);
set_matrix(Rr, 1, 0, 0);
set_matrix(Rr, 1, 1, 1);

//H is 2x4 observation matrix, since only two variables are observed

//measurement z is 2x1 vector
xm = 2;
ym = 1.5;

z = matrix(2,1);
set_matrix(z, 0, 0, 2);
set_matrix(z, 1, 0, 1.5);

//previous state
x = 1;
y = 1;
vx = 0;
vy = 0;

xprev = matrix(4,1);
set_matrix(xprev, 0, 0, 1);
set_matrix(xprev, 1, 0, 0);
set_matrix(xprev, 2, 0, 1);
set_matrix(xprev, 3, 0, 0);

//previous covariance
P11 = 4;
P12 = 3;
P13 = 2;
P14 = 1;

P21 = 4;
P22 = 3;
P23 = 2;
P24 = 1;

P31 = 4;
P32 = 3;
P33 = 2;
P34 = 1;

P41 = 4;
P42 = 3;
P43 = 2;
P44 = 1;

P = matrix(4,4);
set_matrix(P, 0, 0, 4);
set_matrix(P, 0, 1, 3);
set_matrix(P, 0, 2, 2);
set_matrix(P, 0, 3, 1);

set_matrix(P, 1, 0, 4);
set_matrix(P, 1, 1, 3);
set_matrix(P, 1, 2, 2);
set_matrix(P, 1, 3, 1);

set_matrix(P, 2, 0, 4);
set_matrix(P, 2, 1, 3);
set_matrix(P, 2, 2, 2);
set_matrix(P, 2, 3, 1);

set_matrix(P, 3, 0, 4);
set_matrix(P, 3, 1, 3);
set_matrix(P, 3, 2, 2);
set_matrix(P, 3, 3, 1);


dt = 0.5;

//process matrix
A = matrix(4,4);
set_matrix(A, 0, 0, 1);
set_matrix(A, 0, 1, dt);
set_matrix(A, 0, 2, 0);
set_matrix(A, 0, 3, 0);

set_matrix(A, 1, 0, 0);
set_matrix(A, 1, 1, 1);
set_matrix(A, 1, 2, 0);
set_matrix(A, 1, 3, 0);

set_matrix(A, 2, 0, 0);
set_matrix(A, 2, 1, 0);
set_matrix(A, 2, 2, 1);
set_matrix(A, 2, 3, dt);

set_matrix(A, 3, 0, 0);
set_matrix(A, 3, 1, 0);
set_matrix(A, 3, 2, 0);
set_matrix(A, 3, 3, 1);


//prior state Xp = A*X;
xp = x + vx*dt;
yp = y + vy*dt;
vxp = vx;
vyp = vy;
print_line("z = [", xm, " ", ym, "]'");
print_line("X = [", x, " ",vx, " ", y, " ", vy,"]'");

print_line("P = [", P11, " ", P12, " ", P13, " ", P14);
print_line("        ", P21, " ", P22, " ", P23, " ", P24);
print_line("        ", P31, " ", P32, " ", P33, " ", P34);
print_line("        ", P41, " ", P42, " ", P43, " ", P44,"]");

print_line("Xp = [", xp, " ",vxp, " ", yp, " ", vyp,"]'");
Xpmat = A*xprev;
xp2 = get_matrix(Xpmat, 0,0);
vxp2 = get_matrix(Xpmat, 1,0);
yp2 = get_matrix(Xpmat, 2,0);
vyp2 = get_matrix(Xpmat, 3,0);
print_line("Xp2 = [", xp2, " ",vxp2, " ", yp2, " ", vyp2,"]'");


//Pp = A*P*A';
Ptemp11 = P11 + P12*dt;
Ptemp12 = P12;
Ptemp13 = P13 + P14*dt;
Ptemp14 = P14;

Ptemp21 = P21 + P22*dt;
Ptemp22 = P22;
Ptemp23 = P23 + P24*dt;
Ptemp24 = P24;

Ptemp31 = P31 + P32*dt;
Ptemp32 = P32;
Ptemp33 = P33 + P34*dt;
Ptemp34 = P34;

Ptemp41 = P41 + P42*dt;
Ptemp42 = P42;
Ptemp43 = P43 + P44*dt;
Ptemp44 = P44;

Pp11 = Ptemp11 + Ptemp21*dt + Q11;
Pp12 = Ptemp12 + Ptemp22*dt;
Pp13 = Ptemp13 + Ptemp23*dt;
Pp14 = Ptemp14 + Ptemp24*dt;

Pp21 = Ptemp21;
Pp22 = Ptemp22 + Q22;
Pp23 = Ptemp23;
Pp24 = Ptemp24;

Pp31 = Ptemp31 + Ptemp41*dt;
Pp32 = Ptemp32 + Ptemp42*dt;
Pp33 = Ptemp33 + Ptemp43*dt + Q33;
Pp34 = Ptemp34 + Ptemp44*dt;

Pp41 = Ptemp41;
Pp42 = Ptemp42;
Pp43 = Ptemp43;
Pp44 = Ptemp44 + Q44;

Pp = A*P*transpose(A);
Pp = Pp +Q;

print_line("Pp = [", Pp11, " ", Pp12, " ", Pp13, " ", Pp14);
print_line("         ", Pp21, " ", Pp22, " ", Pp23, " ", Pp24);
print_line("         ", Pp31, " ", Pp32, " ", Pp33, " ", Pp34);
print_line("         ", Pp41, " ", Pp42, " ", Pp43, " ", Pp44,"]");

Pp11 = get_matrix(Pp,0,0);
Pp12 = get_matrix(Pp,0,1);
Pp13 = get_matrix(Pp,0,2);
Pp14 = get_matrix(Pp,0,3);

Pp21 = get_matrix(Pp,1,0);
Pp22 = get_matrix(Pp,1,1);
Pp23 = get_matrix(Pp,1,2);
Pp24 = get_matrix(Pp,1,3);

Pp31 = get_matrix(Pp,2,0);
Pp32 = get_matrix(Pp,2,1);
Pp33 = get_matrix(Pp,2,2);
Pp34 = get_matrix(Pp,2,3);

Pp41 = get_matrix(Pp,3,0);
Pp42 = get_matrix(Pp,3,1);
Pp43 = get_matrix(Pp,3,2);
Pp44 = get_matrix(Pp,3,3);

print_line("Pp = [", Pp11, " ", Pp12, " ", Pp13, " ", Pp14);
print_line("         ", Pp21, " ", Pp22, " ", Pp23, " ", Pp24);
print_line("         ", Pp31, " ", Pp32, " ", Pp33, " ", Pp34);
print_line("         ", Pp41, " ", Pp42, " ", Pp43, " ", Pp44,"]");

//Innovation Inn=z-H*Xp
xinnov = xm - xp;
yinnov = ym - yp;

H = matrix(2,4);
H = 0;
set_matrix(H,0,0,1);
set_matrix(H,1,2,1);

innov = z- H*xprev;

//measurement prediction covariance S = H*Pp*H'  + R
Ptemp11 = Pp11;
Ptemp12 = Pp13;
Ptemp21 = Pp21;
Ptemp22 = Pp23;
Ptemp31 = Pp31;
Ptemp32 = Pp33;
Ptemp41 = Pp41;
Ptemp42 = Pp43;

S11 = Ptemp11 + Rr11;
S12 = Ptemp12;
S21 = Ptemp31;
S22 = Ptemp32 + Rr22;

print_line("S = [", S11, " ", S12);
print_line("        ", S21, " ", S22, "]");

S = H*Pp*transpose(H) + R;
S11test = get_matrix(S,0,0);
S21test = get_matrix(S,1,0);
S12test = get_matrix(S,0,1);
S22test = get_matrix(S,1,1);

print_line("S = [", S11test, " ", S12test);
print_line("        ", S21test, " ", S22test, "]");

//Kalman gain K = Pp * H' * inv(S);
detS = S11*S22 - S12*S21;
invS11 = S22/detS;
invS12 = -S12/detS;
invS21 = -S21/detS;
invS22 = S11/detS;

tempMat11 = invS11;
tempMat12 = invS12;
tempMat21 = 0;
tempMat22 = 0;
tempMat31 = invS21;
tempMat32 = invS22;
tempMat41 = 0;
tempMat42 = 0;

K11 = Pp11*tempMat11 + Pp13*tempMat31;
K12 = Pp11*tempMat12 + Pp13*tempMat32;
K21 = Pp21*tempMat11 + Pp23*tempMat31;
K22 = Pp21*tempMat12 + Pp23*tempMat32;
K31 = Pp31*tempMat11 + Pp33*tempMat31;
K32 = Pp31*tempMat12 + Pp33*tempMat32;
K41 = Pp41*tempMat11 + Pp43*tempMat31;
K42 = Pp41*tempMat12 + Pp43*tempMat32;

print_line("K = [", K11, " ", K12);
print_line("        ", K21, " ", K22);
print_line("        ", K31, " ", K32);
print_line("        ", K41, " ", K42,"]");

K = PP*transpose(H)*inverse(S);
K11test = get_matrix(K, 0,0);
K12test = get_matrix(K, 0,1);
K21test = get_matrix(K, 1,0);
K22test = get_matrix(K, 1,1);
K31test = get_matrix(K, 2,0);
K32test = get_matrix(K, 2,1);
K41test = get_matrix(K, 3,0);
K42test = get_matrix(K, 3,1);

print_line("K = [", K11test, " ", K12test);
print_line("        ", K21test, " ", K22test);
print_line("        ", K31test, " ", K32test);
print_line("        ", K41test, " ", K42test,"]");



//Xnew = Xp + K * Inn; //new state
xnew = xp + K11*xinnov + K12*yinnov;
vxnew = vxp + K21*xinnov + K22*yinnov;
ynew = yp + K31*xinnov+ K32*yinnov;
vynew = vyp + K41*xinnov + K42*yinnov;

print_line("X = [", xnew, " ",vxnew, " ", ynew, " ", vynew,"]'");
out(xprev,Xnew);
Xupdated = xprev + K*innov;
Xnew11 = get_matrix(Xupdated, 0,0);
Xnew21 = get_matrix(Xupdated, 1,0);
Xnew31 = get_matrix(Xupdated, 2,0);
Xnew41 = get_matrix(Xupdated, 3,0);

print_line("X = [", Xnew11, " ",Xnew21, " ", Xnew31, " ", Xnew41,"]'");

//Pnew = Pp - K * H * Pp;//new covariance
tempMat11 = Pp11;
tempMat12 = Pp12;
tempMat13 = Pp13;
tempMat14 = Pp14;
tempMat21 = Pp31;
tempMat22 = PP32;
tempMat23 = Pp33;
tempMat24 = PP34;

Pnew11 = Pp11 - (K11*tempMat11 + K12*tempMat21);
Pnew12 = Pp12 - (K11*tempMat12 + K12*tempMat22);
Pnew13 = Pp13 - (K11*tempMat13 + K12*tempMat23);
Pnew14 = Pp14 - (K11*tempMat14 + K12*tempMat24);
Pnew21 = Pp21 - (K21*tempMat11 + K22*tempMat21);
Pnew22 = Pp22 - (K21*tempMat12 + K22*tempMat22);
Pnew23 = Pp23 - (K21*tempMat13 + K22*tempMat23);
Pnew24 = Pp24 - (K21*tempMat14 + K22*tempMat24);
Pnew31 = Pp31 - (K31*tempMat11 + K32*tempMat21);
Pnew32 = Pp32 - (K31*tempMat12 + K32*tempMat22);
Pnew33 = Pp33 - (K31*tempMat13 + K32*tempMat23);
Pnew34 = Pp34 - (K31*tempMat14 + K32*tempMat24);
Pnew41 = Pp41 - (K41*tempMat11 + K42*tempMat21);
Pnew42 = Pp42 - (K41*tempMat12 + K42*tempMat22);
Pnew43 = Pp43 - (K41*tempMat13 + K42*tempMat23);
Pnew44 = Pp44 - (K41*tempMat14 + K42*tempMat24);

print_line("P = [", Pnew11, " ", Pnew12, " ", Pnew13, " ", Pnew14);
print_line("       ", Pnew21, " ", Pnew22, " ", Pnew23, " ", Pnew24);
print_line("       ", Pnew31, " ", Pnew32, " ", Pnew33, " ", Pnew34);
print_line("       ", Pnew41, " ", Pnew42, " ", Pnew43, " ", Pnew44,"]");

Ppnew = Pp - K*H*Pp;

Pnew11 = get_matrix(Ppnew, 0,0);
Pnew12 = get_matrix(Ppnew, 0,1);
Pnew13 = get_matrix(Ppnew, 0,2);
Pnew14 = get_matrix(Ppnew, 0,3);
Pnew21 = get_matrix(Ppnew, 1,0);
Pnew22 = get_matrix(Ppnew, 1,1);
Pnew23 = get_matrix(Ppnew, 1,2);
Pnew24 = get_matrix(Ppnew, 1,3);
Pnew31 = get_matrix(Ppnew, 2,0);
Pnew32 = get_matrix(Ppnew, 2,1);
Pnew33 = get_matrix(Ppnew, 2,2);
Pnew34 = get_matrix(Ppnew, 2,3);
Pnew41 = get_matrix(Ppnew, 3,0);
Pnew42 = get_matrix(Ppnew, 3,1);
Pnew43 = get_matrix(Ppnew, 3,2);
Pnew44 = get_matrix(Ppnew, 3,3);

print_line("P = [", Pnew11, " ", Pnew12, " ", Pnew13, " ", Pnew14);
print_line("       ", Pnew21, " ", Pnew22, " ", Pnew23, " ", Pnew24);
print_line("       ", Pnew31, " ", Pnew32, " ", Pnew33, " ", Pnew34);
print_line("       ", Pnew41, " ", Pnew42, " ", Pnew43, " ", Pnew44,"]");
