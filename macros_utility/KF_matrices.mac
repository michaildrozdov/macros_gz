//state defined as
//x, vx, y, vy
//state covariance matrix P is 4x4 matrix
//Q is diagonal 4x4 process noise matrix

Q = matrix(4,4);
Q = 0;
set_matrix(Q, 0, 0, 0.5);
set_matrix(Q, 1, 1, 0.5);
set_matrix(Q, 2, 2, 0.5);
set_matrix(Q, 3, 3, 0.5);

//R is diagonal 2x2 measurement noise matrix
R = matrix(2,2);
R = 0;
set_matrix(R, 0, 0, 1);
set_matrix(R, 1, 1, 1);


//H is 2x4 observation matrix, since only two variables are observed
H = matrix(2,4);
H = 0;
set_matrix(H,0,0,1);
set_matrix(H,1,2,1);


//measurement z is 2x1 vector

z = matrix(2,1);
set_matrix(z, 0, 0, 2);
set_matrix(z, 1, 0, 1.5);

//previous state

xprev = matrix(4,1);
set_matrix(xprev, 0, 0, 1);
set_matrix(xprev, 1, 0, 0);
set_matrix(xprev, 2, 0, 1);
set_matrix(xprev, 3, 0, 0);

//previous covariance
P = matrix(4,4);
set_matrix(P, 0, 0, 4);
set_matrix(P, 0, 1, 3);
set_matrix(P, 0, 2, 2);
set_matrix(P, 0, 3, 1);

set_matrix(P, 1, 0, 4);
set_matrix(P, 1, 1, 3);
set_matrix(P, 1, 2, 2);
set_matrix(P, 1, 3, 1);

set_matrix(P, 2, 0, 4);
set_matrix(P, 2, 1, 3);
set_matrix(P, 2, 2, 2);
set_matrix(P, 2, 3, 1);

set_matrix(P, 3, 0, 4);
set_matrix(P, 3, 1, 3);
set_matrix(P, 3, 2, 2);
set_matrix(P, 3, 3, 1);


dt = 0.5;

//process matrix
A = matrix(4,4);
set_matrix(A, 0, 0, 1);
set_matrix(A, 0, 1, dt);
set_matrix(A, 0, 2, 0);
set_matrix(A, 0, 3, 0);

set_matrix(A, 1, 0, 0);
set_matrix(A, 1, 1, 1);
set_matrix(A, 1, 2, 0);
set_matrix(A, 1, 3, 0);

set_matrix(A, 2, 0, 0);
set_matrix(A, 2, 1, 0);
set_matrix(A, 2, 2, 1);
set_matrix(A, 2, 3, dt);

set_matrix(A, 3, 0, 0);
set_matrix(A, 3, 1, 0);
set_matrix(A, 3, 2, 0);
set_matrix(A, 3, 3, 1);


//prior state Xp = A*X;

Xpmat = A*xprev;
xp2 = get_matrix(Xpmat, 0,0);
vxp2 = get_matrix(Xpmat, 1,0);
yp2 = get_matrix(Xpmat, 2,0);
vyp2 = get_matrix(Xpmat, 3,0);
print_line("Xp = [", xp2, " ",vxp2, " ", yp2, " ", vyp2,"]'");


//Pp = A*P*A';
Pp = A*P*transpose(A);
Pp = Pp +Q;

Pp11 = get_matrix(Pp,0,0);
Pp12 = get_matrix(Pp,0,1);
Pp13 = get_matrix(Pp,0,2);
Pp14 = get_matrix(Pp,0,3);

Pp21 = get_matrix(Pp,1,0);
Pp22 = get_matrix(Pp,1,1);
Pp23 = get_matrix(Pp,1,2);
Pp24 = get_matrix(Pp,1,3);

Pp31 = get_matrix(Pp,2,0);
Pp32 = get_matrix(Pp,2,1);
Pp33 = get_matrix(Pp,2,2);
Pp34 = get_matrix(Pp,2,3);

Pp41 = get_matrix(Pp,3,0);
Pp42 = get_matrix(Pp,3,1);
Pp43 = get_matrix(Pp,3,2);
Pp44 = get_matrix(Pp,3,3);

print_line("Pp = [", Pp11, " ", Pp12, " ", Pp13, " ", Pp14);
print_line("         ", Pp21, " ", Pp22, " ", Pp23, " ", Pp24);
print_line("         ", Pp31, " ", Pp32, " ", Pp33, " ", Pp34);
print_line("         ", Pp41, " ", Pp42, " ", Pp43, " ", Pp44,"]");

//Innovation Inn=z-H*Xp
innov = z- H*xprev;

//measurement prediction covariance S = H*Pp*H'  + R

S = H*Pp*transpose(H) + R;
S11test = get_matrix(S,0,0);
S21test = get_matrix(S,1,0);
S12test = get_matrix(S,0,1);
S22test = get_matrix(S,1,1);

print_line("S = [", S11test, " ", S12test);
print_line("        ", S21test, " ", S22test, "]");

//Kalman gain K = Pp * H' * inv(S);
K = Pp*transpose(H)*inverse(S);
K11test = get_matrix(K, 0,0);
K12test = get_matrix(K, 0,1);
K21test = get_matrix(K, 1,0);
K22test = get_matrix(K, 1,1);
K31test = get_matrix(K, 2,0);
K32test = get_matrix(K, 2,1);
K41test = get_matrix(K, 3,0);
K42test = get_matrix(K, 3,1);

print_line("K = [", K11test, " ", K12test);
print_line("        ", K21test, " ", K22test);
print_line("        ", K31test, " ", K32test);
print_line("        ", K41test, " ", K42test,"]");


//Xnew = Xp + K * Inn; //new state
Xn = xprev + K*innov;
Xnew11 = get_matrix(Xn, 0,0);
Xnew21 = get_matrix(Xn, 1,0);
Xnew31 = get_matrix(Xn, 2,0);
Xnew41 = get_matrix(Xn, 3,0);

print_line("X = [", Xnew11, " ",Xnew21, " ", Xnew31, " ", Xnew41,"]'");

//Pnew = Pp - K * H * Pp;//new covariance
P = Pp - K*H*Pp;

Pnew11 = get_matrix(P, 0,0);
Pnew12 = get_matrix(P, 0,1);
Pnew13 = get_matrix(P, 0,2);
Pnew14 = get_matrix(P, 0,3);
Pnew21 = get_matrix(P, 1,0);
Pnew22 = get_matrix(P, 1,1);
Pnew23 = get_matrix(P, 1,2);
Pnew24 = get_matrix(P, 1,3);
Pnew31 = get_matrix(P, 2,0);
Pnew32 = get_matrix(P, 2,1);
Pnew33 = get_matrix(P, 2,2);
Pnew34 = get_matrix(P, 2,3);
Pnew41 = get_matrix(P, 3,0);
Pnew42 = get_matrix(P, 3,1);
Pnew43 = get_matrix(P, 3,2);
Pnew44 = get_matrix(P, 3,3);

print_line("P = [", Pnew11, " ", Pnew12, " ", Pnew13, " ", Pnew14);
print_line("       ", Pnew21, " ", Pnew22, " ", Pnew23, " ", Pnew24);
print_line("       ", Pnew31, " ", Pnew32, " ", Pnew33, " ", Pnew34);
print_line("       ", Pnew41, " ", Pnew42, " ", Pnew43, " ", Pnew44,"]");
