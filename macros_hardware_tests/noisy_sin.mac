//macro for checking:
//maximums - r2
//minimums - r3
//standard deviations - r4
//upper signal part most probable value given by histogram last extremum - r8
//lower signal part most probable value given by histogram first extremum - r9
//and last collected histogram (with threshold applied) - r10
//of signals, which are acquired in specified duration
//reference frequencies signal is shown in r6
//average signal amplitude (calculated from histograms) is shown in r7 and also put in allAmplitudes array
//change maximum = mean(r8); (line 153) and minimum = mean(r9); (line 154)
//to maximum = mean(r2); (line 153) and minimum = mean(r3); (line 154) for absolute signal amplitudes

clear_variables();
N = 1000;//for test signal, ignore if acquiring actual signal
x = signal(1,N,false);
randAmount = 0;
totalDuration = 2;//s, how long macro will run
histogramIntervals = 256;//into how many bins histogram is split
histogramMaxDisplace = 1000;//what is maximum possible signal, minimum signal is inverted maximum signal, if any value in signal exceeds this, macro will crash
histogramThreshold = 0.5;//at which percentage (0.5 is half amplitude) histogram threshold will be performed, both histogram maximums should be above this
displayInterval = 10;//which measurement histogram to show, zero based
freqStart = 29;//GHz
freqEnd = 31;//GHz, must be more that freqStart
variateTimeBase = false;
minTimeBase = 0.2;
maxTimeBase = 10;
timeBaseStep = 0.2;


//calculation of acquisition duration
testDuration = time();
acquire(1, dummy);
N = count(dummy);//actual number of points
//sleep(100);//for test
testDuration = time() - testDuration;//ms per acquisition

totalNumber = floor(totalDuration*1000/testDuration);
allMaximums = signal(1, totalNumber, false);
allMinimums = signal(1, totalNumber,false);
allHistMaximums = signal(1, totalNumber, false);
allHistMinimums = signal(1, totalNumber,false);
allStdevs = signal(1, totalNumber,false);
freqs=signal(1, totalNumber,false);


//building frequencies signal
for (ka = 0; ka < totalNumber; ka = ka + 1)
{
	  freqs[ka] = freqStart + ka/(totalNumber - 1)*(freqEnd - freqStart);
}

histograms = matrix(totalNumber, histogramIntervals);//matrix to store histograms
currentHistogram = signal(1, histogramIntervals,false);
partialHistogram = signal(1, histogramIntervals,false);

if (variateTimeBase)
{
	  bestTimeBase = minTimeBase;
	  bestValue = 0;
	  for (curBase = minTimeBase; curBase <= maxTimeBase; curBase = curBase + timeBaseStep)
	  {
		    set_time_base(curBase);
		    acquire(1,x);

		    r1 = x;
		    pos = 0;
		    
		    maxVal = max(x,pos);
		    minVal = min(x,pos);
		    
		    binsDiff = (histogramIntervals - 1)/histogramMaxDisplace/2*(maxVal - minVal);
		    if (binsDiff < bestValue)
		    {
			      //even absolute limits are less than measured from histogram on other time base
			      goto nextbase;
		    }
		    
		    currentHistogram = 0;
		    for (ia = 0; ia < N; ia=ia + 1)
		    {
			      binNumber = (histogramIntervals - 1)*(x[ia]+histogramMaxDisplace)/histogramMaxDisplace/2;
			      currentHistogram[binNumber] = currentHistogram[binNumber]+1;
		    }

		    
		    //threshold of half amplitude of historgram
		    for (ia = 0; ia < histogramIntervals; ia = ia + 1)
		    {
			      if (currentHistogram[ia] < histMax*histogramThreshold)
			      {
					currentHistogram[ia] = 0;
			      }
			      else
			      {
				     currentHistogram[ia] = currentHistogram[ia] - histMax*histogramThreshold;   
			      }
		    }
		    max1 = 0;
		    partialHistogram = 0;
		    for (ia = 0; ia < histogramIntervals; ia = ia + 1)
		    {
			      if (currentHistogram[ia] > 0)
			      {
					for (la = ia; la < histogramIntervals; la = la + 1)
					{
						  if (currentHistogram[la] == 0)
						  {
							    insert(currentHistogram, ia,la-1, partialHistogram, ia);
							    maxVal = max(partialHistogram, max1);
							    goto firstmaxfoundv;
						  }
					}
			      }
		    }
		    firstmaxfoundv:
		    max2 = 0;
		    partialHistogram = 0;
		    for (ia = histogramIntervals-1; ia >= 0; ia = ia - 1)
		    {
			      if (currentHistogram[ia] > 0)
			      {
					for (la = ia; la >= 0; la = la - 1)
					{
						  if (currentHistogram[la] == 0)
						  {
							    insert(currentHistogram, la+1,ia, partialHistogram, la+1);
							    maxVal = max(partialHistogram, max2);
							    goto secondmaxfoundv;
						  }
					}
			      }
		    }
		    secondmaxfoundv:
		    if((max2 - max1) > bestValue)
		    {
			      bestValue = max2 - max1;
			      bestTimeBase = curBase;
		    }
		    nextbase:
	  }
	  
	  set_time_base(bestTimeBase);
}

for (ka = 0; ka < totalNumber; ka = ka + 1)
{
	  //creating test signal
	  //for (ia = 0; ia < N; ia=ia + 1)
	  //{
		    //x[ia] = 500*sin(ia/32*pi()) + randAmount*(rand() - 0.5);
	  //}
	  
	  //getting signal
	  acquire(1,x);

	  //displaying signal
	  r1 = x;
	  
	  //min,max,stdev
	  pos = 0;
	  maxVal = max(x,pos);
	  allMaximums[ka] = maxVal;
	  
	  minVal = min(x,pos);
	  allMinimums[ka] = minVal;
	  
	  allStdevs[ka] = stdev(x);
	  
	  //creating histogram, no knowledge about amplitude of signal is assumed, so histogram is covering +/-1V
	  
	  currentHistogram = 0;
	  for (ia = 0; ia < N; ia=ia + 1)
	  {
		    binNumber = (histogramIntervals - 1)*(x[ia]+histogramMaxDisplace)/histogramMaxDisplace/2;
		    currentHistogram[binNumber] = currentHistogram[binNumber]+1;
	  }
	  histMax = max(currentHistogram,pos);
	  
	  //threshold of half amplitude of historgram
	  for (ia = 0; ia < histogramIntervals; ia = ia + 1)
	  {
		    if (currentHistogram[ia] < histMax*histogramThreshold)
		    {
			      currentHistogram[ia] = 0;
		    }
		    else
		    {
			   currentHistogram[ia] = currentHistogram[ia] - histMax*histogramThreshold;   
		    }
	  }
	  max1 = 0;
	  partialHistogram = 0;
	  for (ia = 0; ia < histogramIntervals; ia = ia + 1)
	  {
		    if (currentHistogram[ia] > 0)
		    {
			      for (la = ia; la < histogramIntervals; la = la + 1)
			      {
					if (currentHistogram[la] == 0)
					{
						  insert(currentHistogram, ia,la-1, partialHistogram, ia);
						  maxVal = max(partialHistogram, max1);
						  goto firstmaxfound;
					}
			      }
		    }
	  }
	  firstmaxfound:
	  max2 = 0;
	  partialHistogram = 0;
	  for (ia = histogramIntervals-1; ia >= 0; ia = ia - 1)
	  {
		    if (currentHistogram[ia] > 0)
		    {
			      for (la = ia; la >= 0; la = la - 1)
			      {
					if (currentHistogram[la] == 0)
					{
						  insert(currentHistogram, la+1,ia, partialHistogram, la+1);
						  maxVal = max(partialHistogram, max2);
						  goto secondmaxfound;
					}
			      }
		    }
	  }
	  secondmaxfound:
	  allHistMaximums[ka] = max2/histogramIntervals*2*histogramMaxDisplace - histogramMaxDisplace;
	  allHistMinimums[ka] = max1/histogramIntervals*2*histogramMaxDisplace - histogramMaxDisplace;
	  //set_matrix_row(histograms, ka,currentHistogram);
	 // sleep(90);
}

//draw(histograms);
r2 = allMaximums;
r3 = allMinimums;
r4 = allStdevs;
r5 = r2;//getting proper time scale
//r5 = get_matrix_row(histograms, displayInterval);
r6 = freqs;

r8 = allHistMaximums;
r9 = allHistMinimums;
r10 = currentHistogram;

maximum = mean(r8);
minimum = mean(r9);
amplitude = maximum - minimum;
out(amplitude, minimum, maximum);
allAmplitudes[currentMeasurement] = amplitude;
r7 = allAmplitudes;

currentMeasurement = currentMeasurement + 1;